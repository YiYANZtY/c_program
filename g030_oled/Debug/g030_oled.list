
g030_oled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001884  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800193c  0800193c  0001193c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800197c  0800197c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800197c  0800197c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800197c  0800197c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800197c  0800197c  0001197c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001980  08001980  00011980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001984  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08001990  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08001990  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000083ca  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000183b  00000000  00000000  000283fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000788  00000000  00000000  00029c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006c0  00000000  00000000  0002a3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001373a  00000000  00000000  0002aa88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009e50  00000000  00000000  0003e1c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00078bf6  00000000  00000000  00048012  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c0c08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019a0  00000000  00000000  000c0c5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08001924 	.word	0x08001924

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08001924 	.word	0x08001924

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 f98a 	bl	8000534 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f805 	bl	800022e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f8b4 	bl	8000390 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000228:	f000 f872 	bl	8000310 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800022c:	e7fe      	b.n	800022c <main+0x14>

0800022e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800022e:	b590      	push	{r4, r7, lr}
 8000230:	b099      	sub	sp, #100	; 0x64
 8000232:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000234:	242c      	movs	r4, #44	; 0x2c
 8000236:	193b      	adds	r3, r7, r4
 8000238:	0018      	movs	r0, r3
 800023a:	2334      	movs	r3, #52	; 0x34
 800023c:	001a      	movs	r2, r3
 800023e:	2100      	movs	r1, #0
 8000240:	f001 fb68 	bl	8001914 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000244:	231c      	movs	r3, #28
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	0018      	movs	r0, r3
 800024a:	2310      	movs	r3, #16
 800024c:	001a      	movs	r2, r3
 800024e:	2100      	movs	r1, #0
 8000250:	f001 fb60 	bl	8001914 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000254:	1d3b      	adds	r3, r7, #4
 8000256:	0018      	movs	r0, r3
 8000258:	2318      	movs	r3, #24
 800025a:	001a      	movs	r2, r3
 800025c:	2100      	movs	r1, #0
 800025e:	f001 fb59 	bl	8001914 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000262:	2380      	movs	r3, #128	; 0x80
 8000264:	009b      	lsls	r3, r3, #2
 8000266:	0018      	movs	r0, r3
 8000268:	f000 fd30 	bl	8000ccc <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800026c:	193b      	adds	r3, r7, r4
 800026e:	2202      	movs	r2, #2
 8000270:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000272:	193b      	adds	r3, r7, r4
 8000274:	2280      	movs	r2, #128	; 0x80
 8000276:	0052      	lsls	r2, r2, #1
 8000278:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800027a:	0021      	movs	r1, r4
 800027c:	187b      	adds	r3, r7, r1
 800027e:	2200      	movs	r2, #0
 8000280:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000282:	187b      	adds	r3, r7, r1
 8000284:	2240      	movs	r2, #64	; 0x40
 8000286:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000288:	187b      	adds	r3, r7, r1
 800028a:	2202      	movs	r2, #2
 800028c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800028e:	187b      	adds	r3, r7, r1
 8000290:	2202      	movs	r2, #2
 8000292:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000294:	187b      	adds	r3, r7, r1
 8000296:	2200      	movs	r2, #0
 8000298:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800029a:	187b      	adds	r3, r7, r1
 800029c:	2208      	movs	r2, #8
 800029e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002a0:	187b      	adds	r3, r7, r1
 80002a2:	2280      	movs	r2, #128	; 0x80
 80002a4:	0292      	lsls	r2, r2, #10
 80002a6:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002a8:	187b      	adds	r3, r7, r1
 80002aa:	2280      	movs	r2, #128	; 0x80
 80002ac:	0592      	lsls	r2, r2, #22
 80002ae:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b0:	187b      	adds	r3, r7, r1
 80002b2:	0018      	movs	r0, r3
 80002b4:	f000 fd4a 	bl	8000d4c <HAL_RCC_OscConfig>
 80002b8:	1e03      	subs	r3, r0, #0
 80002ba:	d001      	beq.n	80002c0 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002bc:	f000 f87e 	bl	80003bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c0:	211c      	movs	r1, #28
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	2207      	movs	r2, #7
 80002c6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c8:	187b      	adds	r3, r7, r1
 80002ca:	2202      	movs	r2, #2
 80002cc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ce:	187b      	adds	r3, r7, r1
 80002d0:	2200      	movs	r2, #0
 80002d2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d4:	187b      	adds	r3, r7, r1
 80002d6:	2200      	movs	r2, #0
 80002d8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002da:	187b      	adds	r3, r7, r1
 80002dc:	2102      	movs	r1, #2
 80002de:	0018      	movs	r0, r3
 80002e0:	f001 f844 	bl	800136c <HAL_RCC_ClockConfig>
 80002e4:	1e03      	subs	r3, r0, #0
 80002e6:	d001      	beq.n	80002ec <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80002e8:	f000 f868 	bl	80003bc <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80002ec:	1d3b      	adds	r3, r7, #4
 80002ee:	2220      	movs	r2, #32
 80002f0:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	2200      	movs	r2, #0
 80002f6:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002f8:	1d3b      	adds	r3, r7, #4
 80002fa:	0018      	movs	r0, r3
 80002fc:	f001 f9c0 	bl	8001680 <HAL_RCCEx_PeriphCLKConfig>
 8000300:	1e03      	subs	r3, r0, #0
 8000302:	d001      	beq.n	8000308 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000304:	f000 f85a 	bl	80003bc <Error_Handler>
  }
}
 8000308:	46c0      	nop			; (mov r8, r8)
 800030a:	46bd      	mov	sp, r7
 800030c:	b019      	add	sp, #100	; 0x64
 800030e:	bd90      	pop	{r4, r7, pc}

08000310 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000314:	4b1b      	ldr	r3, [pc, #108]	; (8000384 <MX_I2C1_Init+0x74>)
 8000316:	4a1c      	ldr	r2, [pc, #112]	; (8000388 <MX_I2C1_Init+0x78>)
 8000318:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 800031a:	4b1a      	ldr	r3, [pc, #104]	; (8000384 <MX_I2C1_Init+0x74>)
 800031c:	4a1b      	ldr	r2, [pc, #108]	; (800038c <MX_I2C1_Init+0x7c>)
 800031e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000320:	4b18      	ldr	r3, [pc, #96]	; (8000384 <MX_I2C1_Init+0x74>)
 8000322:	2200      	movs	r2, #0
 8000324:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000326:	4b17      	ldr	r3, [pc, #92]	; (8000384 <MX_I2C1_Init+0x74>)
 8000328:	2201      	movs	r2, #1
 800032a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800032c:	4b15      	ldr	r3, [pc, #84]	; (8000384 <MX_I2C1_Init+0x74>)
 800032e:	2200      	movs	r2, #0
 8000330:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000332:	4b14      	ldr	r3, [pc, #80]	; (8000384 <MX_I2C1_Init+0x74>)
 8000334:	2200      	movs	r2, #0
 8000336:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000338:	4b12      	ldr	r3, [pc, #72]	; (8000384 <MX_I2C1_Init+0x74>)
 800033a:	2200      	movs	r2, #0
 800033c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800033e:	4b11      	ldr	r3, [pc, #68]	; (8000384 <MX_I2C1_Init+0x74>)
 8000340:	2200      	movs	r2, #0
 8000342:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000344:	4b0f      	ldr	r3, [pc, #60]	; (8000384 <MX_I2C1_Init+0x74>)
 8000346:	2200      	movs	r2, #0
 8000348:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800034a:	4b0e      	ldr	r3, [pc, #56]	; (8000384 <MX_I2C1_Init+0x74>)
 800034c:	0018      	movs	r0, r3
 800034e:	f000 fb8f 	bl	8000a70 <HAL_I2C_Init>
 8000352:	1e03      	subs	r3, r0, #0
 8000354:	d001      	beq.n	800035a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000356:	f000 f831 	bl	80003bc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800035a:	4b0a      	ldr	r3, [pc, #40]	; (8000384 <MX_I2C1_Init+0x74>)
 800035c:	2100      	movs	r1, #0
 800035e:	0018      	movs	r0, r3
 8000360:	f000 fc1c 	bl	8000b9c <HAL_I2CEx_ConfigAnalogFilter>
 8000364:	1e03      	subs	r3, r0, #0
 8000366:	d001      	beq.n	800036c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000368:	f000 f828 	bl	80003bc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800036c:	4b05      	ldr	r3, [pc, #20]	; (8000384 <MX_I2C1_Init+0x74>)
 800036e:	2100      	movs	r1, #0
 8000370:	0018      	movs	r0, r3
 8000372:	f000 fc5f 	bl	8000c34 <HAL_I2CEx_ConfigDigitalFilter>
 8000376:	1e03      	subs	r3, r0, #0
 8000378:	d001      	beq.n	800037e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800037a:	f000 f81f 	bl	80003bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800037e:	46c0      	nop			; (mov r8, r8)
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	20000028 	.word	0x20000028
 8000388:	40005400 	.word	0x40005400
 800038c:	10707dbc 	.word	0x10707dbc

08000390 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000396:	4b08      	ldr	r3, [pc, #32]	; (80003b8 <MX_GPIO_Init+0x28>)
 8000398:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800039a:	4b07      	ldr	r3, [pc, #28]	; (80003b8 <MX_GPIO_Init+0x28>)
 800039c:	2102      	movs	r1, #2
 800039e:	430a      	orrs	r2, r1
 80003a0:	635a      	str	r2, [r3, #52]	; 0x34
 80003a2:	4b05      	ldr	r3, [pc, #20]	; (80003b8 <MX_GPIO_Init+0x28>)
 80003a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003a6:	2202      	movs	r2, #2
 80003a8:	4013      	ands	r3, r2
 80003aa:	607b      	str	r3, [r7, #4]
 80003ac:	687b      	ldr	r3, [r7, #4]

}
 80003ae:	46c0      	nop			; (mov r8, r8)
 80003b0:	46bd      	mov	sp, r7
 80003b2:	b002      	add	sp, #8
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	46c0      	nop			; (mov r8, r8)
 80003b8:	40021000 	.word	0x40021000

080003bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003c0:	b672      	cpsid	i
}
 80003c2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003c4:	e7fe      	b.n	80003c4 <Error_Handler+0x8>
	...

080003c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003ce:	4b0f      	ldr	r3, [pc, #60]	; (800040c <HAL_MspInit+0x44>)
 80003d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80003d2:	4b0e      	ldr	r3, [pc, #56]	; (800040c <HAL_MspInit+0x44>)
 80003d4:	2101      	movs	r1, #1
 80003d6:	430a      	orrs	r2, r1
 80003d8:	641a      	str	r2, [r3, #64]	; 0x40
 80003da:	4b0c      	ldr	r3, [pc, #48]	; (800040c <HAL_MspInit+0x44>)
 80003dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003de:	2201      	movs	r2, #1
 80003e0:	4013      	ands	r3, r2
 80003e2:	607b      	str	r3, [r7, #4]
 80003e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003e6:	4b09      	ldr	r3, [pc, #36]	; (800040c <HAL_MspInit+0x44>)
 80003e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80003ea:	4b08      	ldr	r3, [pc, #32]	; (800040c <HAL_MspInit+0x44>)
 80003ec:	2180      	movs	r1, #128	; 0x80
 80003ee:	0549      	lsls	r1, r1, #21
 80003f0:	430a      	orrs	r2, r1
 80003f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80003f4:	4b05      	ldr	r3, [pc, #20]	; (800040c <HAL_MspInit+0x44>)
 80003f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80003f8:	2380      	movs	r3, #128	; 0x80
 80003fa:	055b      	lsls	r3, r3, #21
 80003fc:	4013      	ands	r3, r2
 80003fe:	603b      	str	r3, [r7, #0]
 8000400:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000402:	46c0      	nop			; (mov r8, r8)
 8000404:	46bd      	mov	sp, r7
 8000406:	b002      	add	sp, #8
 8000408:	bd80      	pop	{r7, pc}
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	40021000 	.word	0x40021000

08000410 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000410:	b590      	push	{r4, r7, lr}
 8000412:	b08b      	sub	sp, #44	; 0x2c
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000418:	2414      	movs	r4, #20
 800041a:	193b      	adds	r3, r7, r4
 800041c:	0018      	movs	r0, r3
 800041e:	2314      	movs	r3, #20
 8000420:	001a      	movs	r2, r3
 8000422:	2100      	movs	r1, #0
 8000424:	f001 fa76 	bl	8001914 <memset>
  if(hi2c->Instance==I2C1)
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a1b      	ldr	r2, [pc, #108]	; (800049c <HAL_I2C_MspInit+0x8c>)
 800042e:	4293      	cmp	r3, r2
 8000430:	d130      	bne.n	8000494 <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000432:	4b1b      	ldr	r3, [pc, #108]	; (80004a0 <HAL_I2C_MspInit+0x90>)
 8000434:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000436:	4b1a      	ldr	r3, [pc, #104]	; (80004a0 <HAL_I2C_MspInit+0x90>)
 8000438:	2102      	movs	r1, #2
 800043a:	430a      	orrs	r2, r1
 800043c:	635a      	str	r2, [r3, #52]	; 0x34
 800043e:	4b18      	ldr	r3, [pc, #96]	; (80004a0 <HAL_I2C_MspInit+0x90>)
 8000440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000442:	2202      	movs	r2, #2
 8000444:	4013      	ands	r3, r2
 8000446:	613b      	str	r3, [r7, #16]
 8000448:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800044a:	193b      	adds	r3, r7, r4
 800044c:	22c0      	movs	r2, #192	; 0xc0
 800044e:	0092      	lsls	r2, r2, #2
 8000450:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000452:	0021      	movs	r1, r4
 8000454:	187b      	adds	r3, r7, r1
 8000456:	2212      	movs	r2, #18
 8000458:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045a:	187b      	adds	r3, r7, r1
 800045c:	2200      	movs	r2, #0
 800045e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000460:	187b      	adds	r3, r7, r1
 8000462:	2200      	movs	r2, #0
 8000464:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000466:	187b      	adds	r3, r7, r1
 8000468:	2206      	movs	r2, #6
 800046a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800046c:	187b      	adds	r3, r7, r1
 800046e:	4a0d      	ldr	r2, [pc, #52]	; (80004a4 <HAL_I2C_MspInit+0x94>)
 8000470:	0019      	movs	r1, r3
 8000472:	0010      	movs	r0, r2
 8000474:	f000 f998 	bl	80007a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000478:	4b09      	ldr	r3, [pc, #36]	; (80004a0 <HAL_I2C_MspInit+0x90>)
 800047a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800047c:	4b08      	ldr	r3, [pc, #32]	; (80004a0 <HAL_I2C_MspInit+0x90>)
 800047e:	2180      	movs	r1, #128	; 0x80
 8000480:	0389      	lsls	r1, r1, #14
 8000482:	430a      	orrs	r2, r1
 8000484:	63da      	str	r2, [r3, #60]	; 0x3c
 8000486:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <HAL_I2C_MspInit+0x90>)
 8000488:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800048a:	2380      	movs	r3, #128	; 0x80
 800048c:	039b      	lsls	r3, r3, #14
 800048e:	4013      	ands	r3, r2
 8000490:	60fb      	str	r3, [r7, #12]
 8000492:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000494:	46c0      	nop			; (mov r8, r8)
 8000496:	46bd      	mov	sp, r7
 8000498:	b00b      	add	sp, #44	; 0x2c
 800049a:	bd90      	pop	{r4, r7, pc}
 800049c:	40005400 	.word	0x40005400
 80004a0:	40021000 	.word	0x40021000
 80004a4:	50000400 	.word	0x50000400

080004a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004ac:	e7fe      	b.n	80004ac <NMI_Handler+0x4>

080004ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004ae:	b580      	push	{r7, lr}
 80004b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004b2:	e7fe      	b.n	80004b2 <HardFault_Handler+0x4>

080004b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80004b8:	46c0      	nop			; (mov r8, r8)
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}

080004be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004be:	b580      	push	{r7, lr}
 80004c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}

080004c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004cc:	f000 f89c 	bl	8000608 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004d0:	46c0      	nop			; (mov r8, r8)
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}

080004d6 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004d6:	b580      	push	{r7, lr}
 80004d8:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}

080004e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004e0:	480d      	ldr	r0, [pc, #52]	; (8000518 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004e2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80004e4:	f7ff fff7 	bl	80004d6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004e8:	480c      	ldr	r0, [pc, #48]	; (800051c <LoopForever+0x6>)
  ldr r1, =_edata
 80004ea:	490d      	ldr	r1, [pc, #52]	; (8000520 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004ec:	4a0d      	ldr	r2, [pc, #52]	; (8000524 <LoopForever+0xe>)
  movs r3, #0
 80004ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004f0:	e002      	b.n	80004f8 <LoopCopyDataInit>

080004f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004f6:	3304      	adds	r3, #4

080004f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004fc:	d3f9      	bcc.n	80004f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004fe:	4a0a      	ldr	r2, [pc, #40]	; (8000528 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000500:	4c0a      	ldr	r4, [pc, #40]	; (800052c <LoopForever+0x16>)
  movs r3, #0
 8000502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000504:	e001      	b.n	800050a <LoopFillZerobss>

08000506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000508:	3204      	adds	r2, #4

0800050a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800050a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800050c:	d3fb      	bcc.n	8000506 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800050e:	f001 f9dd 	bl	80018cc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000512:	f7ff fe81 	bl	8000218 <main>

08000516 <LoopForever>:

LoopForever:
  b LoopForever
 8000516:	e7fe      	b.n	8000516 <LoopForever>
  ldr   r0, =_estack
 8000518:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800051c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000520:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000524:	08001984 	.word	0x08001984
  ldr r2, =_sbss
 8000528:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800052c:	20000078 	.word	0x20000078

08000530 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000530:	e7fe      	b.n	8000530 <ADC1_IRQHandler>
	...

08000534 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800053a:	1dfb      	adds	r3, r7, #7
 800053c:	2200      	movs	r2, #0
 800053e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000540:	4b0b      	ldr	r3, [pc, #44]	; (8000570 <HAL_Init+0x3c>)
 8000542:	681a      	ldr	r2, [r3, #0]
 8000544:	4b0a      	ldr	r3, [pc, #40]	; (8000570 <HAL_Init+0x3c>)
 8000546:	2180      	movs	r1, #128	; 0x80
 8000548:	0049      	lsls	r1, r1, #1
 800054a:	430a      	orrs	r2, r1
 800054c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800054e:	2003      	movs	r0, #3
 8000550:	f000 f810 	bl	8000574 <HAL_InitTick>
 8000554:	1e03      	subs	r3, r0, #0
 8000556:	d003      	beq.n	8000560 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000558:	1dfb      	adds	r3, r7, #7
 800055a:	2201      	movs	r2, #1
 800055c:	701a      	strb	r2, [r3, #0]
 800055e:	e001      	b.n	8000564 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000560:	f7ff ff32 	bl	80003c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000564:	1dfb      	adds	r3, r7, #7
 8000566:	781b      	ldrb	r3, [r3, #0]
}
 8000568:	0018      	movs	r0, r3
 800056a:	46bd      	mov	sp, r7
 800056c:	b002      	add	sp, #8
 800056e:	bd80      	pop	{r7, pc}
 8000570:	40022000 	.word	0x40022000

08000574 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000574:	b590      	push	{r4, r7, lr}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800057c:	230f      	movs	r3, #15
 800057e:	18fb      	adds	r3, r7, r3
 8000580:	2200      	movs	r2, #0
 8000582:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000584:	4b1d      	ldr	r3, [pc, #116]	; (80005fc <HAL_InitTick+0x88>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d02b      	beq.n	80005e4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800058c:	4b1c      	ldr	r3, [pc, #112]	; (8000600 <HAL_InitTick+0x8c>)
 800058e:	681c      	ldr	r4, [r3, #0]
 8000590:	4b1a      	ldr	r3, [pc, #104]	; (80005fc <HAL_InitTick+0x88>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	0019      	movs	r1, r3
 8000596:	23fa      	movs	r3, #250	; 0xfa
 8000598:	0098      	lsls	r0, r3, #2
 800059a:	f7ff fdb1 	bl	8000100 <__udivsi3>
 800059e:	0003      	movs	r3, r0
 80005a0:	0019      	movs	r1, r3
 80005a2:	0020      	movs	r0, r4
 80005a4:	f7ff fdac 	bl	8000100 <__udivsi3>
 80005a8:	0003      	movs	r3, r0
 80005aa:	0018      	movs	r0, r3
 80005ac:	f000 f8ef 	bl	800078e <HAL_SYSTICK_Config>
 80005b0:	1e03      	subs	r3, r0, #0
 80005b2:	d112      	bne.n	80005da <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2b03      	cmp	r3, #3
 80005b8:	d80a      	bhi.n	80005d0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005ba:	6879      	ldr	r1, [r7, #4]
 80005bc:	2301      	movs	r3, #1
 80005be:	425b      	negs	r3, r3
 80005c0:	2200      	movs	r2, #0
 80005c2:	0018      	movs	r0, r3
 80005c4:	f000 f8ce 	bl	8000764 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005c8:	4b0e      	ldr	r3, [pc, #56]	; (8000604 <HAL_InitTick+0x90>)
 80005ca:	687a      	ldr	r2, [r7, #4]
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	e00d      	b.n	80005ec <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80005d0:	230f      	movs	r3, #15
 80005d2:	18fb      	adds	r3, r7, r3
 80005d4:	2201      	movs	r2, #1
 80005d6:	701a      	strb	r2, [r3, #0]
 80005d8:	e008      	b.n	80005ec <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80005da:	230f      	movs	r3, #15
 80005dc:	18fb      	adds	r3, r7, r3
 80005de:	2201      	movs	r2, #1
 80005e0:	701a      	strb	r2, [r3, #0]
 80005e2:	e003      	b.n	80005ec <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005e4:	230f      	movs	r3, #15
 80005e6:	18fb      	adds	r3, r7, r3
 80005e8:	2201      	movs	r2, #1
 80005ea:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80005ec:	230f      	movs	r3, #15
 80005ee:	18fb      	adds	r3, r7, r3
 80005f0:	781b      	ldrb	r3, [r3, #0]
}
 80005f2:	0018      	movs	r0, r3
 80005f4:	46bd      	mov	sp, r7
 80005f6:	b005      	add	sp, #20
 80005f8:	bd90      	pop	{r4, r7, pc}
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	20000008 	.word	0x20000008
 8000600:	20000000 	.word	0x20000000
 8000604:	20000004 	.word	0x20000004

08000608 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800060c:	4b05      	ldr	r3, [pc, #20]	; (8000624 <HAL_IncTick+0x1c>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	001a      	movs	r2, r3
 8000612:	4b05      	ldr	r3, [pc, #20]	; (8000628 <HAL_IncTick+0x20>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	18d2      	adds	r2, r2, r3
 8000618:	4b03      	ldr	r3, [pc, #12]	; (8000628 <HAL_IncTick+0x20>)
 800061a:	601a      	str	r2, [r3, #0]
}
 800061c:	46c0      	nop			; (mov r8, r8)
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	46c0      	nop			; (mov r8, r8)
 8000624:	20000008 	.word	0x20000008
 8000628:	20000074 	.word	0x20000074

0800062c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  return uwTick;
 8000630:	4b02      	ldr	r3, [pc, #8]	; (800063c <HAL_GetTick+0x10>)
 8000632:	681b      	ldr	r3, [r3, #0]
}
 8000634:	0018      	movs	r0, r3
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	20000074 	.word	0x20000074

08000640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000640:	b590      	push	{r4, r7, lr}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	0002      	movs	r2, r0
 8000648:	6039      	str	r1, [r7, #0]
 800064a:	1dfb      	adds	r3, r7, #7
 800064c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800064e:	1dfb      	adds	r3, r7, #7
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2b7f      	cmp	r3, #127	; 0x7f
 8000654:	d828      	bhi.n	80006a8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000656:	4a2f      	ldr	r2, [pc, #188]	; (8000714 <__NVIC_SetPriority+0xd4>)
 8000658:	1dfb      	adds	r3, r7, #7
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	b25b      	sxtb	r3, r3
 800065e:	089b      	lsrs	r3, r3, #2
 8000660:	33c0      	adds	r3, #192	; 0xc0
 8000662:	009b      	lsls	r3, r3, #2
 8000664:	589b      	ldr	r3, [r3, r2]
 8000666:	1dfa      	adds	r2, r7, #7
 8000668:	7812      	ldrb	r2, [r2, #0]
 800066a:	0011      	movs	r1, r2
 800066c:	2203      	movs	r2, #3
 800066e:	400a      	ands	r2, r1
 8000670:	00d2      	lsls	r2, r2, #3
 8000672:	21ff      	movs	r1, #255	; 0xff
 8000674:	4091      	lsls	r1, r2
 8000676:	000a      	movs	r2, r1
 8000678:	43d2      	mvns	r2, r2
 800067a:	401a      	ands	r2, r3
 800067c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	019b      	lsls	r3, r3, #6
 8000682:	22ff      	movs	r2, #255	; 0xff
 8000684:	401a      	ands	r2, r3
 8000686:	1dfb      	adds	r3, r7, #7
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	0018      	movs	r0, r3
 800068c:	2303      	movs	r3, #3
 800068e:	4003      	ands	r3, r0
 8000690:	00db      	lsls	r3, r3, #3
 8000692:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000694:	481f      	ldr	r0, [pc, #124]	; (8000714 <__NVIC_SetPriority+0xd4>)
 8000696:	1dfb      	adds	r3, r7, #7
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	b25b      	sxtb	r3, r3
 800069c:	089b      	lsrs	r3, r3, #2
 800069e:	430a      	orrs	r2, r1
 80006a0:	33c0      	adds	r3, #192	; 0xc0
 80006a2:	009b      	lsls	r3, r3, #2
 80006a4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80006a6:	e031      	b.n	800070c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006a8:	4a1b      	ldr	r2, [pc, #108]	; (8000718 <__NVIC_SetPriority+0xd8>)
 80006aa:	1dfb      	adds	r3, r7, #7
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	0019      	movs	r1, r3
 80006b0:	230f      	movs	r3, #15
 80006b2:	400b      	ands	r3, r1
 80006b4:	3b08      	subs	r3, #8
 80006b6:	089b      	lsrs	r3, r3, #2
 80006b8:	3306      	adds	r3, #6
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	18d3      	adds	r3, r2, r3
 80006be:	3304      	adds	r3, #4
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	1dfa      	adds	r2, r7, #7
 80006c4:	7812      	ldrb	r2, [r2, #0]
 80006c6:	0011      	movs	r1, r2
 80006c8:	2203      	movs	r2, #3
 80006ca:	400a      	ands	r2, r1
 80006cc:	00d2      	lsls	r2, r2, #3
 80006ce:	21ff      	movs	r1, #255	; 0xff
 80006d0:	4091      	lsls	r1, r2
 80006d2:	000a      	movs	r2, r1
 80006d4:	43d2      	mvns	r2, r2
 80006d6:	401a      	ands	r2, r3
 80006d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	019b      	lsls	r3, r3, #6
 80006de:	22ff      	movs	r2, #255	; 0xff
 80006e0:	401a      	ands	r2, r3
 80006e2:	1dfb      	adds	r3, r7, #7
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	0018      	movs	r0, r3
 80006e8:	2303      	movs	r3, #3
 80006ea:	4003      	ands	r3, r0
 80006ec:	00db      	lsls	r3, r3, #3
 80006ee:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006f0:	4809      	ldr	r0, [pc, #36]	; (8000718 <__NVIC_SetPriority+0xd8>)
 80006f2:	1dfb      	adds	r3, r7, #7
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	001c      	movs	r4, r3
 80006f8:	230f      	movs	r3, #15
 80006fa:	4023      	ands	r3, r4
 80006fc:	3b08      	subs	r3, #8
 80006fe:	089b      	lsrs	r3, r3, #2
 8000700:	430a      	orrs	r2, r1
 8000702:	3306      	adds	r3, #6
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	18c3      	adds	r3, r0, r3
 8000708:	3304      	adds	r3, #4
 800070a:	601a      	str	r2, [r3, #0]
}
 800070c:	46c0      	nop			; (mov r8, r8)
 800070e:	46bd      	mov	sp, r7
 8000710:	b003      	add	sp, #12
 8000712:	bd90      	pop	{r4, r7, pc}
 8000714:	e000e100 	.word	0xe000e100
 8000718:	e000ed00 	.word	0xe000ed00

0800071c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	1e5a      	subs	r2, r3, #1
 8000728:	2380      	movs	r3, #128	; 0x80
 800072a:	045b      	lsls	r3, r3, #17
 800072c:	429a      	cmp	r2, r3
 800072e:	d301      	bcc.n	8000734 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000730:	2301      	movs	r3, #1
 8000732:	e010      	b.n	8000756 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000734:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <SysTick_Config+0x44>)
 8000736:	687a      	ldr	r2, [r7, #4]
 8000738:	3a01      	subs	r2, #1
 800073a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800073c:	2301      	movs	r3, #1
 800073e:	425b      	negs	r3, r3
 8000740:	2103      	movs	r1, #3
 8000742:	0018      	movs	r0, r3
 8000744:	f7ff ff7c 	bl	8000640 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000748:	4b05      	ldr	r3, [pc, #20]	; (8000760 <SysTick_Config+0x44>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800074e:	4b04      	ldr	r3, [pc, #16]	; (8000760 <SysTick_Config+0x44>)
 8000750:	2207      	movs	r2, #7
 8000752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000754:	2300      	movs	r3, #0
}
 8000756:	0018      	movs	r0, r3
 8000758:	46bd      	mov	sp, r7
 800075a:	b002      	add	sp, #8
 800075c:	bd80      	pop	{r7, pc}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	e000e010 	.word	0xe000e010

08000764 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	60b9      	str	r1, [r7, #8]
 800076c:	607a      	str	r2, [r7, #4]
 800076e:	210f      	movs	r1, #15
 8000770:	187b      	adds	r3, r7, r1
 8000772:	1c02      	adds	r2, r0, #0
 8000774:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000776:	68ba      	ldr	r2, [r7, #8]
 8000778:	187b      	adds	r3, r7, r1
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	b25b      	sxtb	r3, r3
 800077e:	0011      	movs	r1, r2
 8000780:	0018      	movs	r0, r3
 8000782:	f7ff ff5d 	bl	8000640 <__NVIC_SetPriority>
}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	46bd      	mov	sp, r7
 800078a:	b004      	add	sp, #16
 800078c:	bd80      	pop	{r7, pc}

0800078e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800078e:	b580      	push	{r7, lr}
 8000790:	b082      	sub	sp, #8
 8000792:	af00      	add	r7, sp, #0
 8000794:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	0018      	movs	r0, r3
 800079a:	f7ff ffbf 	bl	800071c <SysTick_Config>
 800079e:	0003      	movs	r3, r0
}
 80007a0:	0018      	movs	r0, r3
 80007a2:	46bd      	mov	sp, r7
 80007a4:	b002      	add	sp, #8
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007b2:	2300      	movs	r3, #0
 80007b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007b6:	e147      	b.n	8000a48 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2101      	movs	r1, #1
 80007be:	697a      	ldr	r2, [r7, #20]
 80007c0:	4091      	lsls	r1, r2
 80007c2:	000a      	movs	r2, r1
 80007c4:	4013      	ands	r3, r2
 80007c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d100      	bne.n	80007d0 <HAL_GPIO_Init+0x28>
 80007ce:	e138      	b.n	8000a42 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	685b      	ldr	r3, [r3, #4]
 80007d4:	2203      	movs	r2, #3
 80007d6:	4013      	ands	r3, r2
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d005      	beq.n	80007e8 <HAL_GPIO_Init+0x40>
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	2203      	movs	r2, #3
 80007e2:	4013      	ands	r3, r2
 80007e4:	2b02      	cmp	r3, #2
 80007e6:	d130      	bne.n	800084a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	689b      	ldr	r3, [r3, #8]
 80007ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	005b      	lsls	r3, r3, #1
 80007f2:	2203      	movs	r2, #3
 80007f4:	409a      	lsls	r2, r3
 80007f6:	0013      	movs	r3, r2
 80007f8:	43da      	mvns	r2, r3
 80007fa:	693b      	ldr	r3, [r7, #16]
 80007fc:	4013      	ands	r3, r2
 80007fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	68da      	ldr	r2, [r3, #12]
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	005b      	lsls	r3, r3, #1
 8000808:	409a      	lsls	r2, r3
 800080a:	0013      	movs	r3, r2
 800080c:	693a      	ldr	r2, [r7, #16]
 800080e:	4313      	orrs	r3, r2
 8000810:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	693a      	ldr	r2, [r7, #16]
 8000816:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800081e:	2201      	movs	r2, #1
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	409a      	lsls	r2, r3
 8000824:	0013      	movs	r3, r2
 8000826:	43da      	mvns	r2, r3
 8000828:	693b      	ldr	r3, [r7, #16]
 800082a:	4013      	ands	r3, r2
 800082c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	091b      	lsrs	r3, r3, #4
 8000834:	2201      	movs	r2, #1
 8000836:	401a      	ands	r2, r3
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	409a      	lsls	r2, r3
 800083c:	0013      	movs	r3, r2
 800083e:	693a      	ldr	r2, [r7, #16]
 8000840:	4313      	orrs	r3, r2
 8000842:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	693a      	ldr	r2, [r7, #16]
 8000848:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	2203      	movs	r2, #3
 8000850:	4013      	ands	r3, r2
 8000852:	2b03      	cmp	r3, #3
 8000854:	d017      	beq.n	8000886 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	68db      	ldr	r3, [r3, #12]
 800085a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	005b      	lsls	r3, r3, #1
 8000860:	2203      	movs	r2, #3
 8000862:	409a      	lsls	r2, r3
 8000864:	0013      	movs	r3, r2
 8000866:	43da      	mvns	r2, r3
 8000868:	693b      	ldr	r3, [r7, #16]
 800086a:	4013      	ands	r3, r2
 800086c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	689a      	ldr	r2, [r3, #8]
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	005b      	lsls	r3, r3, #1
 8000876:	409a      	lsls	r2, r3
 8000878:	0013      	movs	r3, r2
 800087a:	693a      	ldr	r2, [r7, #16]
 800087c:	4313      	orrs	r3, r2
 800087e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	693a      	ldr	r2, [r7, #16]
 8000884:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	2203      	movs	r2, #3
 800088c:	4013      	ands	r3, r2
 800088e:	2b02      	cmp	r3, #2
 8000890:	d123      	bne.n	80008da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	08da      	lsrs	r2, r3, #3
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	3208      	adds	r2, #8
 800089a:	0092      	lsls	r2, r2, #2
 800089c:	58d3      	ldr	r3, [r2, r3]
 800089e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	2207      	movs	r2, #7
 80008a4:	4013      	ands	r3, r2
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	220f      	movs	r2, #15
 80008aa:	409a      	lsls	r2, r3
 80008ac:	0013      	movs	r3, r2
 80008ae:	43da      	mvns	r2, r3
 80008b0:	693b      	ldr	r3, [r7, #16]
 80008b2:	4013      	ands	r3, r2
 80008b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	691a      	ldr	r2, [r3, #16]
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	2107      	movs	r1, #7
 80008be:	400b      	ands	r3, r1
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	409a      	lsls	r2, r3
 80008c4:	0013      	movs	r3, r2
 80008c6:	693a      	ldr	r2, [r7, #16]
 80008c8:	4313      	orrs	r3, r2
 80008ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	08da      	lsrs	r2, r3, #3
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	3208      	adds	r2, #8
 80008d4:	0092      	lsls	r2, r2, #2
 80008d6:	6939      	ldr	r1, [r7, #16]
 80008d8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	005b      	lsls	r3, r3, #1
 80008e4:	2203      	movs	r2, #3
 80008e6:	409a      	lsls	r2, r3
 80008e8:	0013      	movs	r3, r2
 80008ea:	43da      	mvns	r2, r3
 80008ec:	693b      	ldr	r3, [r7, #16]
 80008ee:	4013      	ands	r3, r2
 80008f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	2203      	movs	r2, #3
 80008f8:	401a      	ands	r2, r3
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	409a      	lsls	r2, r3
 8000900:	0013      	movs	r3, r2
 8000902:	693a      	ldr	r2, [r7, #16]
 8000904:	4313      	orrs	r3, r2
 8000906:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	693a      	ldr	r2, [r7, #16]
 800090c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	685a      	ldr	r2, [r3, #4]
 8000912:	23c0      	movs	r3, #192	; 0xc0
 8000914:	029b      	lsls	r3, r3, #10
 8000916:	4013      	ands	r3, r2
 8000918:	d100      	bne.n	800091c <HAL_GPIO_Init+0x174>
 800091a:	e092      	b.n	8000a42 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800091c:	4a50      	ldr	r2, [pc, #320]	; (8000a60 <HAL_GPIO_Init+0x2b8>)
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	089b      	lsrs	r3, r3, #2
 8000922:	3318      	adds	r3, #24
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	589b      	ldr	r3, [r3, r2]
 8000928:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	2203      	movs	r2, #3
 800092e:	4013      	ands	r3, r2
 8000930:	00db      	lsls	r3, r3, #3
 8000932:	220f      	movs	r2, #15
 8000934:	409a      	lsls	r2, r3
 8000936:	0013      	movs	r3, r2
 8000938:	43da      	mvns	r2, r3
 800093a:	693b      	ldr	r3, [r7, #16]
 800093c:	4013      	ands	r3, r2
 800093e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000940:	687a      	ldr	r2, [r7, #4]
 8000942:	23a0      	movs	r3, #160	; 0xa0
 8000944:	05db      	lsls	r3, r3, #23
 8000946:	429a      	cmp	r2, r3
 8000948:	d013      	beq.n	8000972 <HAL_GPIO_Init+0x1ca>
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4a45      	ldr	r2, [pc, #276]	; (8000a64 <HAL_GPIO_Init+0x2bc>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d00d      	beq.n	800096e <HAL_GPIO_Init+0x1c6>
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4a44      	ldr	r2, [pc, #272]	; (8000a68 <HAL_GPIO_Init+0x2c0>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d007      	beq.n	800096a <HAL_GPIO_Init+0x1c2>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4a43      	ldr	r2, [pc, #268]	; (8000a6c <HAL_GPIO_Init+0x2c4>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d101      	bne.n	8000966 <HAL_GPIO_Init+0x1be>
 8000962:	2303      	movs	r3, #3
 8000964:	e006      	b.n	8000974 <HAL_GPIO_Init+0x1cc>
 8000966:	2305      	movs	r3, #5
 8000968:	e004      	b.n	8000974 <HAL_GPIO_Init+0x1cc>
 800096a:	2302      	movs	r3, #2
 800096c:	e002      	b.n	8000974 <HAL_GPIO_Init+0x1cc>
 800096e:	2301      	movs	r3, #1
 8000970:	e000      	b.n	8000974 <HAL_GPIO_Init+0x1cc>
 8000972:	2300      	movs	r3, #0
 8000974:	697a      	ldr	r2, [r7, #20]
 8000976:	2103      	movs	r1, #3
 8000978:	400a      	ands	r2, r1
 800097a:	00d2      	lsls	r2, r2, #3
 800097c:	4093      	lsls	r3, r2
 800097e:	693a      	ldr	r2, [r7, #16]
 8000980:	4313      	orrs	r3, r2
 8000982:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000984:	4936      	ldr	r1, [pc, #216]	; (8000a60 <HAL_GPIO_Init+0x2b8>)
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	089b      	lsrs	r3, r3, #2
 800098a:	3318      	adds	r3, #24
 800098c:	009b      	lsls	r3, r3, #2
 800098e:	693a      	ldr	r2, [r7, #16]
 8000990:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000992:	4b33      	ldr	r3, [pc, #204]	; (8000a60 <HAL_GPIO_Init+0x2b8>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	43da      	mvns	r2, r3
 800099c:	693b      	ldr	r3, [r7, #16]
 800099e:	4013      	ands	r3, r2
 80009a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	685a      	ldr	r2, [r3, #4]
 80009a6:	2380      	movs	r3, #128	; 0x80
 80009a8:	035b      	lsls	r3, r3, #13
 80009aa:	4013      	ands	r3, r2
 80009ac:	d003      	beq.n	80009b6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	4313      	orrs	r3, r2
 80009b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80009b6:	4b2a      	ldr	r3, [pc, #168]	; (8000a60 <HAL_GPIO_Init+0x2b8>)
 80009b8:	693a      	ldr	r2, [r7, #16]
 80009ba:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80009bc:	4b28      	ldr	r3, [pc, #160]	; (8000a60 <HAL_GPIO_Init+0x2b8>)
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	43da      	mvns	r2, r3
 80009c6:	693b      	ldr	r3, [r7, #16]
 80009c8:	4013      	ands	r3, r2
 80009ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	685a      	ldr	r2, [r3, #4]
 80009d0:	2380      	movs	r3, #128	; 0x80
 80009d2:	039b      	lsls	r3, r3, #14
 80009d4:	4013      	ands	r3, r2
 80009d6:	d003      	beq.n	80009e0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80009d8:	693a      	ldr	r2, [r7, #16]
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	4313      	orrs	r3, r2
 80009de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80009e0:	4b1f      	ldr	r3, [pc, #124]	; (8000a60 <HAL_GPIO_Init+0x2b8>)
 80009e2:	693a      	ldr	r2, [r7, #16]
 80009e4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80009e6:	4a1e      	ldr	r2, [pc, #120]	; (8000a60 <HAL_GPIO_Init+0x2b8>)
 80009e8:	2384      	movs	r3, #132	; 0x84
 80009ea:	58d3      	ldr	r3, [r2, r3]
 80009ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	43da      	mvns	r2, r3
 80009f2:	693b      	ldr	r3, [r7, #16]
 80009f4:	4013      	ands	r3, r2
 80009f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685a      	ldr	r2, [r3, #4]
 80009fc:	2380      	movs	r3, #128	; 0x80
 80009fe:	029b      	lsls	r3, r3, #10
 8000a00:	4013      	ands	r3, r2
 8000a02:	d003      	beq.n	8000a0c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000a04:	693a      	ldr	r2, [r7, #16]
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a0c:	4914      	ldr	r1, [pc, #80]	; (8000a60 <HAL_GPIO_Init+0x2b8>)
 8000a0e:	2284      	movs	r2, #132	; 0x84
 8000a10:	693b      	ldr	r3, [r7, #16]
 8000a12:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000a14:	4a12      	ldr	r2, [pc, #72]	; (8000a60 <HAL_GPIO_Init+0x2b8>)
 8000a16:	2380      	movs	r3, #128	; 0x80
 8000a18:	58d3      	ldr	r3, [r2, r3]
 8000a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	43da      	mvns	r2, r3
 8000a20:	693b      	ldr	r3, [r7, #16]
 8000a22:	4013      	ands	r3, r2
 8000a24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	685a      	ldr	r2, [r3, #4]
 8000a2a:	2380      	movs	r3, #128	; 0x80
 8000a2c:	025b      	lsls	r3, r3, #9
 8000a2e:	4013      	ands	r3, r2
 8000a30:	d003      	beq.n	8000a3a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	4313      	orrs	r3, r2
 8000a38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a3a:	4909      	ldr	r1, [pc, #36]	; (8000a60 <HAL_GPIO_Init+0x2b8>)
 8000a3c:	2280      	movs	r2, #128	; 0x80
 8000a3e:	693b      	ldr	r3, [r7, #16]
 8000a40:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	3301      	adds	r3, #1
 8000a46:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	40da      	lsrs	r2, r3
 8000a50:	1e13      	subs	r3, r2, #0
 8000a52:	d000      	beq.n	8000a56 <HAL_GPIO_Init+0x2ae>
 8000a54:	e6b0      	b.n	80007b8 <HAL_GPIO_Init+0x10>
  }
}
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	46c0      	nop			; (mov r8, r8)
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	b006      	add	sp, #24
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40021800 	.word	0x40021800
 8000a64:	50000400 	.word	0x50000400
 8000a68:	50000800 	.word	0x50000800
 8000a6c:	50000c00 	.word	0x50000c00

08000a70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d101      	bne.n	8000a82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e082      	b.n	8000b88 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2241      	movs	r2, #65	; 0x41
 8000a86:	5c9b      	ldrb	r3, [r3, r2]
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d107      	bne.n	8000a9e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2240      	movs	r2, #64	; 0x40
 8000a92:	2100      	movs	r1, #0
 8000a94:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f7ff fcb9 	bl	8000410 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2241      	movs	r2, #65	; 0x41
 8000aa2:	2124      	movs	r1, #36	; 0x24
 8000aa4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	438a      	bics	r2, r1
 8000ab4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	685a      	ldr	r2, [r3, #4]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4934      	ldr	r1, [pc, #208]	; (8000b90 <HAL_I2C_Init+0x120>)
 8000ac0:	400a      	ands	r2, r1
 8000ac2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	689a      	ldr	r2, [r3, #8]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4931      	ldr	r1, [pc, #196]	; (8000b94 <HAL_I2C_Init+0x124>)
 8000ad0:	400a      	ands	r2, r1
 8000ad2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d108      	bne.n	8000aee <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	689a      	ldr	r2, [r3, #8]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2180      	movs	r1, #128	; 0x80
 8000ae6:	0209      	lsls	r1, r1, #8
 8000ae8:	430a      	orrs	r2, r1
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	e007      	b.n	8000afe <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	689a      	ldr	r2, [r3, #8]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	2184      	movs	r1, #132	; 0x84
 8000af8:	0209      	lsls	r1, r1, #8
 8000afa:	430a      	orrs	r2, r1
 8000afc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	68db      	ldr	r3, [r3, #12]
 8000b02:	2b02      	cmp	r3, #2
 8000b04:	d104      	bne.n	8000b10 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	2280      	movs	r2, #128	; 0x80
 8000b0c:	0112      	lsls	r2, r2, #4
 8000b0e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	685a      	ldr	r2, [r3, #4]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	491f      	ldr	r1, [pc, #124]	; (8000b98 <HAL_I2C_Init+0x128>)
 8000b1c:	430a      	orrs	r2, r1
 8000b1e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	68da      	ldr	r2, [r3, #12]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	491a      	ldr	r1, [pc, #104]	; (8000b94 <HAL_I2C_Init+0x124>)
 8000b2c:	400a      	ands	r2, r1
 8000b2e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	691a      	ldr	r2, [r3, #16]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	695b      	ldr	r3, [r3, #20]
 8000b38:	431a      	orrs	r2, r3
 8000b3a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	430a      	orrs	r2, r1
 8000b48:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	69d9      	ldr	r1, [r3, #28]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6a1a      	ldr	r2, [r3, #32]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	430a      	orrs	r2, r1
 8000b58:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2101      	movs	r1, #1
 8000b66:	430a      	orrs	r2, r1
 8000b68:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2241      	movs	r2, #65	; 0x41
 8000b74:	2120      	movs	r1, #32
 8000b76:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2242      	movs	r2, #66	; 0x42
 8000b82:	2100      	movs	r1, #0
 8000b84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000b86:	2300      	movs	r3, #0
}
 8000b88:	0018      	movs	r0, r3
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	b002      	add	sp, #8
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	f0ffffff 	.word	0xf0ffffff
 8000b94:	ffff7fff 	.word	0xffff7fff
 8000b98:	02008000 	.word	0x02008000

08000b9c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2241      	movs	r2, #65	; 0x41
 8000baa:	5c9b      	ldrb	r3, [r3, r2]
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	2b20      	cmp	r3, #32
 8000bb0:	d138      	bne.n	8000c24 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2240      	movs	r2, #64	; 0x40
 8000bb6:	5c9b      	ldrb	r3, [r3, r2]
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d101      	bne.n	8000bc0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	e032      	b.n	8000c26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2240      	movs	r2, #64	; 0x40
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2241      	movs	r2, #65	; 0x41
 8000bcc:	2124      	movs	r1, #36	; 0x24
 8000bce:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2101      	movs	r1, #1
 8000bdc:	438a      	bics	r2, r1
 8000bde:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4911      	ldr	r1, [pc, #68]	; (8000c30 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8000bec:	400a      	ands	r2, r1
 8000bee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	6819      	ldr	r1, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	683a      	ldr	r2, [r7, #0]
 8000bfc:	430a      	orrs	r2, r1
 8000bfe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2241      	movs	r2, #65	; 0x41
 8000c14:	2120      	movs	r1, #32
 8000c16:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2240      	movs	r2, #64	; 0x40
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000c20:	2300      	movs	r3, #0
 8000c22:	e000      	b.n	8000c26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000c24:	2302      	movs	r3, #2
  }
}
 8000c26:	0018      	movs	r0, r3
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	b002      	add	sp, #8
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	ffffefff 	.word	0xffffefff

08000c34 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2241      	movs	r2, #65	; 0x41
 8000c42:	5c9b      	ldrb	r3, [r3, r2]
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	2b20      	cmp	r3, #32
 8000c48:	d139      	bne.n	8000cbe <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2240      	movs	r2, #64	; 0x40
 8000c4e:	5c9b      	ldrb	r3, [r3, r2]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d101      	bne.n	8000c58 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000c54:	2302      	movs	r3, #2
 8000c56:	e033      	b.n	8000cc0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2240      	movs	r2, #64	; 0x40
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2241      	movs	r2, #65	; 0x41
 8000c64:	2124      	movs	r1, #36	; 0x24
 8000c66:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2101      	movs	r1, #1
 8000c74:	438a      	bics	r2, r1
 8000c76:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	4a11      	ldr	r2, [pc, #68]	; (8000cc8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8000c84:	4013      	ands	r3, r2
 8000c86:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	021b      	lsls	r3, r3, #8
 8000c8c:	68fa      	ldr	r2, [r7, #12]
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	68fa      	ldr	r2, [r7, #12]
 8000c98:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	430a      	orrs	r2, r1
 8000ca8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2241      	movs	r2, #65	; 0x41
 8000cae:	2120      	movs	r1, #32
 8000cb0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2240      	movs	r2, #64	; 0x40
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	e000      	b.n	8000cc0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8000cbe:	2302      	movs	r3, #2
  }
}
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	b004      	add	sp, #16
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	fffff0ff 	.word	0xfffff0ff

08000ccc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000cd4:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a19      	ldr	r2, [pc, #100]	; (8000d40 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000cda:	4013      	ands	r3, r2
 8000cdc:	0019      	movs	r1, r3
 8000cde:	4b17      	ldr	r3, [pc, #92]	; (8000d3c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000ce0:	687a      	ldr	r2, [r7, #4]
 8000ce2:	430a      	orrs	r2, r1
 8000ce4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	2380      	movs	r3, #128	; 0x80
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d11f      	bne.n	8000d30 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000cf0:	4b14      	ldr	r3, [pc, #80]	; (8000d44 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	0013      	movs	r3, r2
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	189b      	adds	r3, r3, r2
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	4912      	ldr	r1, [pc, #72]	; (8000d48 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000cfe:	0018      	movs	r0, r3
 8000d00:	f7ff f9fe 	bl	8000100 <__udivsi3>
 8000d04:	0003      	movs	r3, r0
 8000d06:	3301      	adds	r3, #1
 8000d08:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d0a:	e008      	b.n	8000d1e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d003      	beq.n	8000d1a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	3b01      	subs	r3, #1
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	e001      	b.n	8000d1e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	e009      	b.n	8000d32 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d1e:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000d20:	695a      	ldr	r2, [r3, #20]
 8000d22:	2380      	movs	r3, #128	; 0x80
 8000d24:	00db      	lsls	r3, r3, #3
 8000d26:	401a      	ands	r2, r3
 8000d28:	2380      	movs	r3, #128	; 0x80
 8000d2a:	00db      	lsls	r3, r3, #3
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d0ed      	beq.n	8000d0c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	0018      	movs	r0, r3
 8000d34:	46bd      	mov	sp, r7
 8000d36:	b004      	add	sp, #16
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	40007000 	.word	0x40007000
 8000d40:	fffff9ff 	.word	0xfffff9ff
 8000d44:	20000000 	.word	0x20000000
 8000d48:	000f4240 	.word	0x000f4240

08000d4c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b088      	sub	sp, #32
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d101      	bne.n	8000d5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e2f3      	b.n	8001346 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2201      	movs	r2, #1
 8000d64:	4013      	ands	r3, r2
 8000d66:	d100      	bne.n	8000d6a <HAL_RCC_OscConfig+0x1e>
 8000d68:	e07c      	b.n	8000e64 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d6a:	4bc3      	ldr	r3, [pc, #780]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	2238      	movs	r2, #56	; 0x38
 8000d70:	4013      	ands	r3, r2
 8000d72:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d74:	4bc0      	ldr	r3, [pc, #768]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	2203      	movs	r2, #3
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	2b10      	cmp	r3, #16
 8000d82:	d102      	bne.n	8000d8a <HAL_RCC_OscConfig+0x3e>
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	2b03      	cmp	r3, #3
 8000d88:	d002      	beq.n	8000d90 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	2b08      	cmp	r3, #8
 8000d8e:	d10b      	bne.n	8000da8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d90:	4bb9      	ldr	r3, [pc, #740]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	2380      	movs	r3, #128	; 0x80
 8000d96:	029b      	lsls	r3, r3, #10
 8000d98:	4013      	ands	r3, r2
 8000d9a:	d062      	beq.n	8000e62 <HAL_RCC_OscConfig+0x116>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d15e      	bne.n	8000e62 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8000da4:	2301      	movs	r3, #1
 8000da6:	e2ce      	b.n	8001346 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	685a      	ldr	r2, [r3, #4]
 8000dac:	2380      	movs	r3, #128	; 0x80
 8000dae:	025b      	lsls	r3, r3, #9
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d107      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x78>
 8000db4:	4bb0      	ldr	r3, [pc, #704]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	4baf      	ldr	r3, [pc, #700]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000dba:	2180      	movs	r1, #128	; 0x80
 8000dbc:	0249      	lsls	r1, r1, #9
 8000dbe:	430a      	orrs	r2, r1
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	e020      	b.n	8000e06 <HAL_RCC_OscConfig+0xba>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	685a      	ldr	r2, [r3, #4]
 8000dc8:	23a0      	movs	r3, #160	; 0xa0
 8000dca:	02db      	lsls	r3, r3, #11
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d10e      	bne.n	8000dee <HAL_RCC_OscConfig+0xa2>
 8000dd0:	4ba9      	ldr	r3, [pc, #676]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	4ba8      	ldr	r3, [pc, #672]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000dd6:	2180      	movs	r1, #128	; 0x80
 8000dd8:	02c9      	lsls	r1, r1, #11
 8000dda:	430a      	orrs	r2, r1
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	4ba6      	ldr	r3, [pc, #664]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	4ba5      	ldr	r3, [pc, #660]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000de4:	2180      	movs	r1, #128	; 0x80
 8000de6:	0249      	lsls	r1, r1, #9
 8000de8:	430a      	orrs	r2, r1
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	e00b      	b.n	8000e06 <HAL_RCC_OscConfig+0xba>
 8000dee:	4ba2      	ldr	r3, [pc, #648]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	4ba1      	ldr	r3, [pc, #644]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000df4:	49a1      	ldr	r1, [pc, #644]	; (800107c <HAL_RCC_OscConfig+0x330>)
 8000df6:	400a      	ands	r2, r1
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	4b9f      	ldr	r3, [pc, #636]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	4b9e      	ldr	r3, [pc, #632]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000e00:	499f      	ldr	r1, [pc, #636]	; (8001080 <HAL_RCC_OscConfig+0x334>)
 8000e02:	400a      	ands	r2, r1
 8000e04:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d014      	beq.n	8000e38 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e0e:	f7ff fc0d 	bl	800062c <HAL_GetTick>
 8000e12:	0003      	movs	r3, r0
 8000e14:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e16:	e008      	b.n	8000e2a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e18:	f7ff fc08 	bl	800062c <HAL_GetTick>
 8000e1c:	0002      	movs	r2, r0
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	2b64      	cmp	r3, #100	; 0x64
 8000e24:	d901      	bls.n	8000e2a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8000e26:	2303      	movs	r3, #3
 8000e28:	e28d      	b.n	8001346 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e2a:	4b93      	ldr	r3, [pc, #588]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	2380      	movs	r3, #128	; 0x80
 8000e30:	029b      	lsls	r3, r3, #10
 8000e32:	4013      	ands	r3, r2
 8000e34:	d0f0      	beq.n	8000e18 <HAL_RCC_OscConfig+0xcc>
 8000e36:	e015      	b.n	8000e64 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e38:	f7ff fbf8 	bl	800062c <HAL_GetTick>
 8000e3c:	0003      	movs	r3, r0
 8000e3e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e40:	e008      	b.n	8000e54 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e42:	f7ff fbf3 	bl	800062c <HAL_GetTick>
 8000e46:	0002      	movs	r2, r0
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	1ad3      	subs	r3, r2, r3
 8000e4c:	2b64      	cmp	r3, #100	; 0x64
 8000e4e:	d901      	bls.n	8000e54 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8000e50:	2303      	movs	r3, #3
 8000e52:	e278      	b.n	8001346 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e54:	4b88      	ldr	r3, [pc, #544]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	2380      	movs	r3, #128	; 0x80
 8000e5a:	029b      	lsls	r3, r3, #10
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	d1f0      	bne.n	8000e42 <HAL_RCC_OscConfig+0xf6>
 8000e60:	e000      	b.n	8000e64 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e62:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2202      	movs	r2, #2
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	d100      	bne.n	8000e70 <HAL_RCC_OscConfig+0x124>
 8000e6e:	e099      	b.n	8000fa4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e70:	4b81      	ldr	r3, [pc, #516]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	2238      	movs	r2, #56	; 0x38
 8000e76:	4013      	ands	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e7a:	4b7f      	ldr	r3, [pc, #508]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000e7c:	68db      	ldr	r3, [r3, #12]
 8000e7e:	2203      	movs	r2, #3
 8000e80:	4013      	ands	r3, r2
 8000e82:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	2b10      	cmp	r3, #16
 8000e88:	d102      	bne.n	8000e90 <HAL_RCC_OscConfig+0x144>
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d002      	beq.n	8000e96 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d135      	bne.n	8000f02 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e96:	4b78      	ldr	r3, [pc, #480]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	2380      	movs	r3, #128	; 0x80
 8000e9c:	00db      	lsls	r3, r3, #3
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	d005      	beq.n	8000eae <HAL_RCC_OscConfig+0x162>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	68db      	ldr	r3, [r3, #12]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d101      	bne.n	8000eae <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e24b      	b.n	8001346 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eae:	4b72      	ldr	r3, [pc, #456]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	4a74      	ldr	r2, [pc, #464]	; (8001084 <HAL_RCC_OscConfig+0x338>)
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	0019      	movs	r1, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	695b      	ldr	r3, [r3, #20]
 8000ebc:	021a      	lsls	r2, r3, #8
 8000ebe:	4b6e      	ldr	r3, [pc, #440]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ec4:	69bb      	ldr	r3, [r7, #24]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d112      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000eca:	4b6b      	ldr	r3, [pc, #428]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a6e      	ldr	r2, [pc, #440]	; (8001088 <HAL_RCC_OscConfig+0x33c>)
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	0019      	movs	r1, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	691a      	ldr	r2, [r3, #16]
 8000ed8:	4b67      	ldr	r3, [pc, #412]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000eda:	430a      	orrs	r2, r1
 8000edc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000ede:	4b66      	ldr	r3, [pc, #408]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	0adb      	lsrs	r3, r3, #11
 8000ee4:	2207      	movs	r2, #7
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	4a68      	ldr	r2, [pc, #416]	; (800108c <HAL_RCC_OscConfig+0x340>)
 8000eea:	40da      	lsrs	r2, r3
 8000eec:	4b68      	ldr	r3, [pc, #416]	; (8001090 <HAL_RCC_OscConfig+0x344>)
 8000eee:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000ef0:	4b68      	ldr	r3, [pc, #416]	; (8001094 <HAL_RCC_OscConfig+0x348>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	f7ff fb3d 	bl	8000574 <HAL_InitTick>
 8000efa:	1e03      	subs	r3, r0, #0
 8000efc:	d051      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e221      	b.n	8001346 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d030      	beq.n	8000f6c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000f0a:	4b5b      	ldr	r3, [pc, #364]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a5e      	ldr	r2, [pc, #376]	; (8001088 <HAL_RCC_OscConfig+0x33c>)
 8000f10:	4013      	ands	r3, r2
 8000f12:	0019      	movs	r1, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	691a      	ldr	r2, [r3, #16]
 8000f18:	4b57      	ldr	r3, [pc, #348]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000f1a:	430a      	orrs	r2, r1
 8000f1c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8000f1e:	4b56      	ldr	r3, [pc, #344]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	4b55      	ldr	r3, [pc, #340]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000f24:	2180      	movs	r1, #128	; 0x80
 8000f26:	0049      	lsls	r1, r1, #1
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f2c:	f7ff fb7e 	bl	800062c <HAL_GetTick>
 8000f30:	0003      	movs	r3, r0
 8000f32:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f34:	e008      	b.n	8000f48 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f36:	f7ff fb79 	bl	800062c <HAL_GetTick>
 8000f3a:	0002      	movs	r2, r0
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d901      	bls.n	8000f48 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8000f44:	2303      	movs	r3, #3
 8000f46:	e1fe      	b.n	8001346 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f48:	4b4b      	ldr	r3, [pc, #300]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	2380      	movs	r3, #128	; 0x80
 8000f4e:	00db      	lsls	r3, r3, #3
 8000f50:	4013      	ands	r3, r2
 8000f52:	d0f0      	beq.n	8000f36 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f54:	4b48      	ldr	r3, [pc, #288]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	4a4a      	ldr	r2, [pc, #296]	; (8001084 <HAL_RCC_OscConfig+0x338>)
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	0019      	movs	r1, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	695b      	ldr	r3, [r3, #20]
 8000f62:	021a      	lsls	r2, r3, #8
 8000f64:	4b44      	ldr	r3, [pc, #272]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000f66:	430a      	orrs	r2, r1
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	e01b      	b.n	8000fa4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8000f6c:	4b42      	ldr	r3, [pc, #264]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	4b41      	ldr	r3, [pc, #260]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000f72:	4949      	ldr	r1, [pc, #292]	; (8001098 <HAL_RCC_OscConfig+0x34c>)
 8000f74:	400a      	ands	r2, r1
 8000f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f78:	f7ff fb58 	bl	800062c <HAL_GetTick>
 8000f7c:	0003      	movs	r3, r0
 8000f7e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f80:	e008      	b.n	8000f94 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f82:	f7ff fb53 	bl	800062c <HAL_GetTick>
 8000f86:	0002      	movs	r2, r0
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d901      	bls.n	8000f94 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8000f90:	2303      	movs	r3, #3
 8000f92:	e1d8      	b.n	8001346 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f94:	4b38      	ldr	r3, [pc, #224]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	2380      	movs	r3, #128	; 0x80
 8000f9a:	00db      	lsls	r3, r3, #3
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	d1f0      	bne.n	8000f82 <HAL_RCC_OscConfig+0x236>
 8000fa0:	e000      	b.n	8000fa4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fa2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2208      	movs	r2, #8
 8000faa:	4013      	ands	r3, r2
 8000fac:	d047      	beq.n	800103e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8000fae:	4b32      	ldr	r3, [pc, #200]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	2238      	movs	r2, #56	; 0x38
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	2b18      	cmp	r3, #24
 8000fb8:	d10a      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8000fba:	4b2f      	ldr	r3, [pc, #188]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fbe:	2202      	movs	r2, #2
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	d03c      	beq.n	800103e <HAL_RCC_OscConfig+0x2f2>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d138      	bne.n	800103e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e1ba      	b.n	8001346 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d019      	beq.n	800100c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8000fd8:	4b27      	ldr	r3, [pc, #156]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000fda:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000fdc:	4b26      	ldr	r3, [pc, #152]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000fde:	2101      	movs	r1, #1
 8000fe0:	430a      	orrs	r2, r1
 8000fe2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fe4:	f7ff fb22 	bl	800062c <HAL_GetTick>
 8000fe8:	0003      	movs	r3, r0
 8000fea:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000fec:	e008      	b.n	8001000 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fee:	f7ff fb1d 	bl	800062c <HAL_GetTick>
 8000ff2:	0002      	movs	r2, r0
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d901      	bls.n	8001000 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	e1a2      	b.n	8001346 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001000:	4b1d      	ldr	r3, [pc, #116]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8001002:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001004:	2202      	movs	r2, #2
 8001006:	4013      	ands	r3, r2
 8001008:	d0f1      	beq.n	8000fee <HAL_RCC_OscConfig+0x2a2>
 800100a:	e018      	b.n	800103e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800100c:	4b1a      	ldr	r3, [pc, #104]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 800100e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001010:	4b19      	ldr	r3, [pc, #100]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8001012:	2101      	movs	r1, #1
 8001014:	438a      	bics	r2, r1
 8001016:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001018:	f7ff fb08 	bl	800062c <HAL_GetTick>
 800101c:	0003      	movs	r3, r0
 800101e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001020:	e008      	b.n	8001034 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001022:	f7ff fb03 	bl	800062c <HAL_GetTick>
 8001026:	0002      	movs	r2, r0
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	2b02      	cmp	r3, #2
 800102e:	d901      	bls.n	8001034 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001030:	2303      	movs	r3, #3
 8001032:	e188      	b.n	8001346 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001034:	4b10      	ldr	r3, [pc, #64]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8001036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001038:	2202      	movs	r2, #2
 800103a:	4013      	ands	r3, r2
 800103c:	d1f1      	bne.n	8001022 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2204      	movs	r2, #4
 8001044:	4013      	ands	r3, r2
 8001046:	d100      	bne.n	800104a <HAL_RCC_OscConfig+0x2fe>
 8001048:	e0c6      	b.n	80011d8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800104a:	231f      	movs	r3, #31
 800104c:	18fb      	adds	r3, r7, r3
 800104e:	2200      	movs	r2, #0
 8001050:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001052:	4b09      	ldr	r3, [pc, #36]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	2238      	movs	r2, #56	; 0x38
 8001058:	4013      	ands	r3, r2
 800105a:	2b20      	cmp	r3, #32
 800105c:	d11e      	bne.n	800109c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8001060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001062:	2202      	movs	r2, #2
 8001064:	4013      	ands	r3, r2
 8001066:	d100      	bne.n	800106a <HAL_RCC_OscConfig+0x31e>
 8001068:	e0b6      	b.n	80011d8 <HAL_RCC_OscConfig+0x48c>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d000      	beq.n	8001074 <HAL_RCC_OscConfig+0x328>
 8001072:	e0b1      	b.n	80011d8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	e166      	b.n	8001346 <HAL_RCC_OscConfig+0x5fa>
 8001078:	40021000 	.word	0x40021000
 800107c:	fffeffff 	.word	0xfffeffff
 8001080:	fffbffff 	.word	0xfffbffff
 8001084:	ffff80ff 	.word	0xffff80ff
 8001088:	ffffc7ff 	.word	0xffffc7ff
 800108c:	00f42400 	.word	0x00f42400
 8001090:	20000000 	.word	0x20000000
 8001094:	20000004 	.word	0x20000004
 8001098:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800109c:	4bac      	ldr	r3, [pc, #688]	; (8001350 <HAL_RCC_OscConfig+0x604>)
 800109e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010a0:	2380      	movs	r3, #128	; 0x80
 80010a2:	055b      	lsls	r3, r3, #21
 80010a4:	4013      	ands	r3, r2
 80010a6:	d101      	bne.n	80010ac <HAL_RCC_OscConfig+0x360>
 80010a8:	2301      	movs	r3, #1
 80010aa:	e000      	b.n	80010ae <HAL_RCC_OscConfig+0x362>
 80010ac:	2300      	movs	r3, #0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d011      	beq.n	80010d6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80010b2:	4ba7      	ldr	r3, [pc, #668]	; (8001350 <HAL_RCC_OscConfig+0x604>)
 80010b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010b6:	4ba6      	ldr	r3, [pc, #664]	; (8001350 <HAL_RCC_OscConfig+0x604>)
 80010b8:	2180      	movs	r1, #128	; 0x80
 80010ba:	0549      	lsls	r1, r1, #21
 80010bc:	430a      	orrs	r2, r1
 80010be:	63da      	str	r2, [r3, #60]	; 0x3c
 80010c0:	4ba3      	ldr	r3, [pc, #652]	; (8001350 <HAL_RCC_OscConfig+0x604>)
 80010c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010c4:	2380      	movs	r3, #128	; 0x80
 80010c6:	055b      	lsls	r3, r3, #21
 80010c8:	4013      	ands	r3, r2
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80010ce:	231f      	movs	r3, #31
 80010d0:	18fb      	adds	r3, r7, r3
 80010d2:	2201      	movs	r2, #1
 80010d4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010d6:	4b9f      	ldr	r3, [pc, #636]	; (8001354 <HAL_RCC_OscConfig+0x608>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	2380      	movs	r3, #128	; 0x80
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	4013      	ands	r3, r2
 80010e0:	d11a      	bne.n	8001118 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010e2:	4b9c      	ldr	r3, [pc, #624]	; (8001354 <HAL_RCC_OscConfig+0x608>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	4b9b      	ldr	r3, [pc, #620]	; (8001354 <HAL_RCC_OscConfig+0x608>)
 80010e8:	2180      	movs	r1, #128	; 0x80
 80010ea:	0049      	lsls	r1, r1, #1
 80010ec:	430a      	orrs	r2, r1
 80010ee:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80010f0:	f7ff fa9c 	bl	800062c <HAL_GetTick>
 80010f4:	0003      	movs	r3, r0
 80010f6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010f8:	e008      	b.n	800110c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010fa:	f7ff fa97 	bl	800062c <HAL_GetTick>
 80010fe:	0002      	movs	r2, r0
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	2b02      	cmp	r3, #2
 8001106:	d901      	bls.n	800110c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001108:	2303      	movs	r3, #3
 800110a:	e11c      	b.n	8001346 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800110c:	4b91      	ldr	r3, [pc, #580]	; (8001354 <HAL_RCC_OscConfig+0x608>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	2380      	movs	r3, #128	; 0x80
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	4013      	ands	r3, r2
 8001116:	d0f0      	beq.n	80010fa <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	2b01      	cmp	r3, #1
 800111e:	d106      	bne.n	800112e <HAL_RCC_OscConfig+0x3e2>
 8001120:	4b8b      	ldr	r3, [pc, #556]	; (8001350 <HAL_RCC_OscConfig+0x604>)
 8001122:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001124:	4b8a      	ldr	r3, [pc, #552]	; (8001350 <HAL_RCC_OscConfig+0x604>)
 8001126:	2101      	movs	r1, #1
 8001128:	430a      	orrs	r2, r1
 800112a:	65da      	str	r2, [r3, #92]	; 0x5c
 800112c:	e01c      	b.n	8001168 <HAL_RCC_OscConfig+0x41c>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	2b05      	cmp	r3, #5
 8001134:	d10c      	bne.n	8001150 <HAL_RCC_OscConfig+0x404>
 8001136:	4b86      	ldr	r3, [pc, #536]	; (8001350 <HAL_RCC_OscConfig+0x604>)
 8001138:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800113a:	4b85      	ldr	r3, [pc, #532]	; (8001350 <HAL_RCC_OscConfig+0x604>)
 800113c:	2104      	movs	r1, #4
 800113e:	430a      	orrs	r2, r1
 8001140:	65da      	str	r2, [r3, #92]	; 0x5c
 8001142:	4b83      	ldr	r3, [pc, #524]	; (8001350 <HAL_RCC_OscConfig+0x604>)
 8001144:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001146:	4b82      	ldr	r3, [pc, #520]	; (8001350 <HAL_RCC_OscConfig+0x604>)
 8001148:	2101      	movs	r1, #1
 800114a:	430a      	orrs	r2, r1
 800114c:	65da      	str	r2, [r3, #92]	; 0x5c
 800114e:	e00b      	b.n	8001168 <HAL_RCC_OscConfig+0x41c>
 8001150:	4b7f      	ldr	r3, [pc, #508]	; (8001350 <HAL_RCC_OscConfig+0x604>)
 8001152:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001154:	4b7e      	ldr	r3, [pc, #504]	; (8001350 <HAL_RCC_OscConfig+0x604>)
 8001156:	2101      	movs	r1, #1
 8001158:	438a      	bics	r2, r1
 800115a:	65da      	str	r2, [r3, #92]	; 0x5c
 800115c:	4b7c      	ldr	r3, [pc, #496]	; (8001350 <HAL_RCC_OscConfig+0x604>)
 800115e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001160:	4b7b      	ldr	r3, [pc, #492]	; (8001350 <HAL_RCC_OscConfig+0x604>)
 8001162:	2104      	movs	r1, #4
 8001164:	438a      	bics	r2, r1
 8001166:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d014      	beq.n	800119a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001170:	f7ff fa5c 	bl	800062c <HAL_GetTick>
 8001174:	0003      	movs	r3, r0
 8001176:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001178:	e009      	b.n	800118e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800117a:	f7ff fa57 	bl	800062c <HAL_GetTick>
 800117e:	0002      	movs	r2, r0
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	4a74      	ldr	r2, [pc, #464]	; (8001358 <HAL_RCC_OscConfig+0x60c>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d901      	bls.n	800118e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e0db      	b.n	8001346 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800118e:	4b70      	ldr	r3, [pc, #448]	; (8001350 <HAL_RCC_OscConfig+0x604>)
 8001190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001192:	2202      	movs	r2, #2
 8001194:	4013      	ands	r3, r2
 8001196:	d0f0      	beq.n	800117a <HAL_RCC_OscConfig+0x42e>
 8001198:	e013      	b.n	80011c2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800119a:	f7ff fa47 	bl	800062c <HAL_GetTick>
 800119e:	0003      	movs	r3, r0
 80011a0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011a2:	e009      	b.n	80011b8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011a4:	f7ff fa42 	bl	800062c <HAL_GetTick>
 80011a8:	0002      	movs	r2, r0
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	4a6a      	ldr	r2, [pc, #424]	; (8001358 <HAL_RCC_OscConfig+0x60c>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d901      	bls.n	80011b8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80011b4:	2303      	movs	r3, #3
 80011b6:	e0c6      	b.n	8001346 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011b8:	4b65      	ldr	r3, [pc, #404]	; (8001350 <HAL_RCC_OscConfig+0x604>)
 80011ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011bc:	2202      	movs	r2, #2
 80011be:	4013      	ands	r3, r2
 80011c0:	d1f0      	bne.n	80011a4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80011c2:	231f      	movs	r3, #31
 80011c4:	18fb      	adds	r3, r7, r3
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d105      	bne.n	80011d8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80011cc:	4b60      	ldr	r3, [pc, #384]	; (8001350 <HAL_RCC_OscConfig+0x604>)
 80011ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011d0:	4b5f      	ldr	r3, [pc, #380]	; (8001350 <HAL_RCC_OscConfig+0x604>)
 80011d2:	4962      	ldr	r1, [pc, #392]	; (800135c <HAL_RCC_OscConfig+0x610>)
 80011d4:	400a      	ands	r2, r1
 80011d6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	69db      	ldr	r3, [r3, #28]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d100      	bne.n	80011e2 <HAL_RCC_OscConfig+0x496>
 80011e0:	e0b0      	b.n	8001344 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011e2:	4b5b      	ldr	r3, [pc, #364]	; (8001350 <HAL_RCC_OscConfig+0x604>)
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	2238      	movs	r2, #56	; 0x38
 80011e8:	4013      	ands	r3, r2
 80011ea:	2b10      	cmp	r3, #16
 80011ec:	d100      	bne.n	80011f0 <HAL_RCC_OscConfig+0x4a4>
 80011ee:	e078      	b.n	80012e2 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	69db      	ldr	r3, [r3, #28]
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d153      	bne.n	80012a0 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011f8:	4b55      	ldr	r3, [pc, #340]	; (8001350 <HAL_RCC_OscConfig+0x604>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	4b54      	ldr	r3, [pc, #336]	; (8001350 <HAL_RCC_OscConfig+0x604>)
 80011fe:	4958      	ldr	r1, [pc, #352]	; (8001360 <HAL_RCC_OscConfig+0x614>)
 8001200:	400a      	ands	r2, r1
 8001202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001204:	f7ff fa12 	bl	800062c <HAL_GetTick>
 8001208:	0003      	movs	r3, r0
 800120a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800120c:	e008      	b.n	8001220 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800120e:	f7ff fa0d 	bl	800062c <HAL_GetTick>
 8001212:	0002      	movs	r2, r0
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	2b02      	cmp	r3, #2
 800121a:	d901      	bls.n	8001220 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800121c:	2303      	movs	r3, #3
 800121e:	e092      	b.n	8001346 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001220:	4b4b      	ldr	r3, [pc, #300]	; (8001350 <HAL_RCC_OscConfig+0x604>)
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	2380      	movs	r3, #128	; 0x80
 8001226:	049b      	lsls	r3, r3, #18
 8001228:	4013      	ands	r3, r2
 800122a:	d1f0      	bne.n	800120e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800122c:	4b48      	ldr	r3, [pc, #288]	; (8001350 <HAL_RCC_OscConfig+0x604>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	4a4c      	ldr	r2, [pc, #304]	; (8001364 <HAL_RCC_OscConfig+0x618>)
 8001232:	4013      	ands	r3, r2
 8001234:	0019      	movs	r1, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6a1a      	ldr	r2, [r3, #32]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123e:	431a      	orrs	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001244:	021b      	lsls	r3, r3, #8
 8001246:	431a      	orrs	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800124c:	431a      	orrs	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	431a      	orrs	r2, r3
 8001254:	4b3e      	ldr	r3, [pc, #248]	; (8001350 <HAL_RCC_OscConfig+0x604>)
 8001256:	430a      	orrs	r2, r1
 8001258:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800125a:	4b3d      	ldr	r3, [pc, #244]	; (8001350 <HAL_RCC_OscConfig+0x604>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	4b3c      	ldr	r3, [pc, #240]	; (8001350 <HAL_RCC_OscConfig+0x604>)
 8001260:	2180      	movs	r1, #128	; 0x80
 8001262:	0449      	lsls	r1, r1, #17
 8001264:	430a      	orrs	r2, r1
 8001266:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001268:	4b39      	ldr	r3, [pc, #228]	; (8001350 <HAL_RCC_OscConfig+0x604>)
 800126a:	68da      	ldr	r2, [r3, #12]
 800126c:	4b38      	ldr	r3, [pc, #224]	; (8001350 <HAL_RCC_OscConfig+0x604>)
 800126e:	2180      	movs	r1, #128	; 0x80
 8001270:	0549      	lsls	r1, r1, #21
 8001272:	430a      	orrs	r2, r1
 8001274:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001276:	f7ff f9d9 	bl	800062c <HAL_GetTick>
 800127a:	0003      	movs	r3, r0
 800127c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800127e:	e008      	b.n	8001292 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001280:	f7ff f9d4 	bl	800062c <HAL_GetTick>
 8001284:	0002      	movs	r2, r0
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b02      	cmp	r3, #2
 800128c:	d901      	bls.n	8001292 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e059      	b.n	8001346 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001292:	4b2f      	ldr	r3, [pc, #188]	; (8001350 <HAL_RCC_OscConfig+0x604>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	2380      	movs	r3, #128	; 0x80
 8001298:	049b      	lsls	r3, r3, #18
 800129a:	4013      	ands	r3, r2
 800129c:	d0f0      	beq.n	8001280 <HAL_RCC_OscConfig+0x534>
 800129e:	e051      	b.n	8001344 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012a0:	4b2b      	ldr	r3, [pc, #172]	; (8001350 <HAL_RCC_OscConfig+0x604>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	4b2a      	ldr	r3, [pc, #168]	; (8001350 <HAL_RCC_OscConfig+0x604>)
 80012a6:	492e      	ldr	r1, [pc, #184]	; (8001360 <HAL_RCC_OscConfig+0x614>)
 80012a8:	400a      	ands	r2, r1
 80012aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ac:	f7ff f9be 	bl	800062c <HAL_GetTick>
 80012b0:	0003      	movs	r3, r0
 80012b2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012b4:	e008      	b.n	80012c8 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012b6:	f7ff f9b9 	bl	800062c <HAL_GetTick>
 80012ba:	0002      	movs	r2, r0
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d901      	bls.n	80012c8 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80012c4:	2303      	movs	r3, #3
 80012c6:	e03e      	b.n	8001346 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012c8:	4b21      	ldr	r3, [pc, #132]	; (8001350 <HAL_RCC_OscConfig+0x604>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	2380      	movs	r3, #128	; 0x80
 80012ce:	049b      	lsls	r3, r3, #18
 80012d0:	4013      	ands	r3, r2
 80012d2:	d1f0      	bne.n	80012b6 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80012d4:	4b1e      	ldr	r3, [pc, #120]	; (8001350 <HAL_RCC_OscConfig+0x604>)
 80012d6:	68da      	ldr	r2, [r3, #12]
 80012d8:	4b1d      	ldr	r3, [pc, #116]	; (8001350 <HAL_RCC_OscConfig+0x604>)
 80012da:	4923      	ldr	r1, [pc, #140]	; (8001368 <HAL_RCC_OscConfig+0x61c>)
 80012dc:	400a      	ands	r2, r1
 80012de:	60da      	str	r2, [r3, #12]
 80012e0:	e030      	b.n	8001344 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	69db      	ldr	r3, [r3, #28]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d101      	bne.n	80012ee <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e02b      	b.n	8001346 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80012ee:	4b18      	ldr	r3, [pc, #96]	; (8001350 <HAL_RCC_OscConfig+0x604>)
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	2203      	movs	r2, #3
 80012f8:	401a      	ands	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a1b      	ldr	r3, [r3, #32]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d11e      	bne.n	8001340 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	2270      	movs	r2, #112	; 0x70
 8001306:	401a      	ands	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800130c:	429a      	cmp	r2, r3
 800130e:	d117      	bne.n	8001340 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001310:	697a      	ldr	r2, [r7, #20]
 8001312:	23fe      	movs	r3, #254	; 0xfe
 8001314:	01db      	lsls	r3, r3, #7
 8001316:	401a      	ands	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800131c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800131e:	429a      	cmp	r2, r3
 8001320:	d10e      	bne.n	8001340 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001322:	697a      	ldr	r2, [r7, #20]
 8001324:	23f8      	movs	r3, #248	; 0xf8
 8001326:	039b      	lsls	r3, r3, #14
 8001328:	401a      	ands	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800132e:	429a      	cmp	r2, r3
 8001330:	d106      	bne.n	8001340 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	0f5b      	lsrs	r3, r3, #29
 8001336:	075a      	lsls	r2, r3, #29
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800133c:	429a      	cmp	r2, r3
 800133e:	d001      	beq.n	8001344 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e000      	b.n	8001346 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001344:	2300      	movs	r3, #0
}
 8001346:	0018      	movs	r0, r3
 8001348:	46bd      	mov	sp, r7
 800134a:	b008      	add	sp, #32
 800134c:	bd80      	pop	{r7, pc}
 800134e:	46c0      	nop			; (mov r8, r8)
 8001350:	40021000 	.word	0x40021000
 8001354:	40007000 	.word	0x40007000
 8001358:	00001388 	.word	0x00001388
 800135c:	efffffff 	.word	0xefffffff
 8001360:	feffffff 	.word	0xfeffffff
 8001364:	1fc1808c 	.word	0x1fc1808c
 8001368:	effefffc 	.word	0xeffefffc

0800136c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d101      	bne.n	8001380 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e0e9      	b.n	8001554 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001380:	4b76      	ldr	r3, [pc, #472]	; (800155c <HAL_RCC_ClockConfig+0x1f0>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2207      	movs	r2, #7
 8001386:	4013      	ands	r3, r2
 8001388:	683a      	ldr	r2, [r7, #0]
 800138a:	429a      	cmp	r2, r3
 800138c:	d91e      	bls.n	80013cc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800138e:	4b73      	ldr	r3, [pc, #460]	; (800155c <HAL_RCC_ClockConfig+0x1f0>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2207      	movs	r2, #7
 8001394:	4393      	bics	r3, r2
 8001396:	0019      	movs	r1, r3
 8001398:	4b70      	ldr	r3, [pc, #448]	; (800155c <HAL_RCC_ClockConfig+0x1f0>)
 800139a:	683a      	ldr	r2, [r7, #0]
 800139c:	430a      	orrs	r2, r1
 800139e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80013a0:	f7ff f944 	bl	800062c <HAL_GetTick>
 80013a4:	0003      	movs	r3, r0
 80013a6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80013a8:	e009      	b.n	80013be <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013aa:	f7ff f93f 	bl	800062c <HAL_GetTick>
 80013ae:	0002      	movs	r2, r0
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	4a6a      	ldr	r2, [pc, #424]	; (8001560 <HAL_RCC_ClockConfig+0x1f4>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d901      	bls.n	80013be <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e0ca      	b.n	8001554 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80013be:	4b67      	ldr	r3, [pc, #412]	; (800155c <HAL_RCC_ClockConfig+0x1f0>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2207      	movs	r2, #7
 80013c4:	4013      	ands	r3, r2
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d1ee      	bne.n	80013aa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2202      	movs	r2, #2
 80013d2:	4013      	ands	r3, r2
 80013d4:	d015      	beq.n	8001402 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2204      	movs	r2, #4
 80013dc:	4013      	ands	r3, r2
 80013de:	d006      	beq.n	80013ee <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80013e0:	4b60      	ldr	r3, [pc, #384]	; (8001564 <HAL_RCC_ClockConfig+0x1f8>)
 80013e2:	689a      	ldr	r2, [r3, #8]
 80013e4:	4b5f      	ldr	r3, [pc, #380]	; (8001564 <HAL_RCC_ClockConfig+0x1f8>)
 80013e6:	21e0      	movs	r1, #224	; 0xe0
 80013e8:	01c9      	lsls	r1, r1, #7
 80013ea:	430a      	orrs	r2, r1
 80013ec:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013ee:	4b5d      	ldr	r3, [pc, #372]	; (8001564 <HAL_RCC_ClockConfig+0x1f8>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	4a5d      	ldr	r2, [pc, #372]	; (8001568 <HAL_RCC_ClockConfig+0x1fc>)
 80013f4:	4013      	ands	r3, r2
 80013f6:	0019      	movs	r1, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	689a      	ldr	r2, [r3, #8]
 80013fc:	4b59      	ldr	r3, [pc, #356]	; (8001564 <HAL_RCC_ClockConfig+0x1f8>)
 80013fe:	430a      	orrs	r2, r1
 8001400:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2201      	movs	r2, #1
 8001408:	4013      	ands	r3, r2
 800140a:	d057      	beq.n	80014bc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d107      	bne.n	8001424 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001414:	4b53      	ldr	r3, [pc, #332]	; (8001564 <HAL_RCC_ClockConfig+0x1f8>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	2380      	movs	r3, #128	; 0x80
 800141a:	029b      	lsls	r3, r3, #10
 800141c:	4013      	ands	r3, r2
 800141e:	d12b      	bne.n	8001478 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e097      	b.n	8001554 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	2b02      	cmp	r3, #2
 800142a:	d107      	bne.n	800143c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800142c:	4b4d      	ldr	r3, [pc, #308]	; (8001564 <HAL_RCC_ClockConfig+0x1f8>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	2380      	movs	r3, #128	; 0x80
 8001432:	049b      	lsls	r3, r3, #18
 8001434:	4013      	ands	r3, r2
 8001436:	d11f      	bne.n	8001478 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e08b      	b.n	8001554 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d107      	bne.n	8001454 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001444:	4b47      	ldr	r3, [pc, #284]	; (8001564 <HAL_RCC_ClockConfig+0x1f8>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	2380      	movs	r3, #128	; 0x80
 800144a:	00db      	lsls	r3, r3, #3
 800144c:	4013      	ands	r3, r2
 800144e:	d113      	bne.n	8001478 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e07f      	b.n	8001554 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b03      	cmp	r3, #3
 800145a:	d106      	bne.n	800146a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800145c:	4b41      	ldr	r3, [pc, #260]	; (8001564 <HAL_RCC_ClockConfig+0x1f8>)
 800145e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001460:	2202      	movs	r2, #2
 8001462:	4013      	ands	r3, r2
 8001464:	d108      	bne.n	8001478 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e074      	b.n	8001554 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800146a:	4b3e      	ldr	r3, [pc, #248]	; (8001564 <HAL_RCC_ClockConfig+0x1f8>)
 800146c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800146e:	2202      	movs	r2, #2
 8001470:	4013      	ands	r3, r2
 8001472:	d101      	bne.n	8001478 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e06d      	b.n	8001554 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001478:	4b3a      	ldr	r3, [pc, #232]	; (8001564 <HAL_RCC_ClockConfig+0x1f8>)
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	2207      	movs	r2, #7
 800147e:	4393      	bics	r3, r2
 8001480:	0019      	movs	r1, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685a      	ldr	r2, [r3, #4]
 8001486:	4b37      	ldr	r3, [pc, #220]	; (8001564 <HAL_RCC_ClockConfig+0x1f8>)
 8001488:	430a      	orrs	r2, r1
 800148a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800148c:	f7ff f8ce 	bl	800062c <HAL_GetTick>
 8001490:	0003      	movs	r3, r0
 8001492:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001494:	e009      	b.n	80014aa <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001496:	f7ff f8c9 	bl	800062c <HAL_GetTick>
 800149a:	0002      	movs	r2, r0
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	4a2f      	ldr	r2, [pc, #188]	; (8001560 <HAL_RCC_ClockConfig+0x1f4>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e054      	b.n	8001554 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014aa:	4b2e      	ldr	r3, [pc, #184]	; (8001564 <HAL_RCC_ClockConfig+0x1f8>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	2238      	movs	r2, #56	; 0x38
 80014b0:	401a      	ands	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d1ec      	bne.n	8001496 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014bc:	4b27      	ldr	r3, [pc, #156]	; (800155c <HAL_RCC_ClockConfig+0x1f0>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2207      	movs	r2, #7
 80014c2:	4013      	ands	r3, r2
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d21e      	bcs.n	8001508 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ca:	4b24      	ldr	r3, [pc, #144]	; (800155c <HAL_RCC_ClockConfig+0x1f0>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2207      	movs	r2, #7
 80014d0:	4393      	bics	r3, r2
 80014d2:	0019      	movs	r1, r3
 80014d4:	4b21      	ldr	r3, [pc, #132]	; (800155c <HAL_RCC_ClockConfig+0x1f0>)
 80014d6:	683a      	ldr	r2, [r7, #0]
 80014d8:	430a      	orrs	r2, r1
 80014da:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80014dc:	f7ff f8a6 	bl	800062c <HAL_GetTick>
 80014e0:	0003      	movs	r3, r0
 80014e2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80014e4:	e009      	b.n	80014fa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014e6:	f7ff f8a1 	bl	800062c <HAL_GetTick>
 80014ea:	0002      	movs	r2, r0
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	4a1b      	ldr	r2, [pc, #108]	; (8001560 <HAL_RCC_ClockConfig+0x1f4>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e02c      	b.n	8001554 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80014fa:	4b18      	ldr	r3, [pc, #96]	; (800155c <HAL_RCC_ClockConfig+0x1f0>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2207      	movs	r2, #7
 8001500:	4013      	ands	r3, r2
 8001502:	683a      	ldr	r2, [r7, #0]
 8001504:	429a      	cmp	r2, r3
 8001506:	d1ee      	bne.n	80014e6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2204      	movs	r2, #4
 800150e:	4013      	ands	r3, r2
 8001510:	d009      	beq.n	8001526 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001512:	4b14      	ldr	r3, [pc, #80]	; (8001564 <HAL_RCC_ClockConfig+0x1f8>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	4a15      	ldr	r2, [pc, #84]	; (800156c <HAL_RCC_ClockConfig+0x200>)
 8001518:	4013      	ands	r3, r2
 800151a:	0019      	movs	r1, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	68da      	ldr	r2, [r3, #12]
 8001520:	4b10      	ldr	r3, [pc, #64]	; (8001564 <HAL_RCC_ClockConfig+0x1f8>)
 8001522:	430a      	orrs	r2, r1
 8001524:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001526:	f000 f829 	bl	800157c <HAL_RCC_GetSysClockFreq>
 800152a:	0001      	movs	r1, r0
 800152c:	4b0d      	ldr	r3, [pc, #52]	; (8001564 <HAL_RCC_ClockConfig+0x1f8>)
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	0a1b      	lsrs	r3, r3, #8
 8001532:	220f      	movs	r2, #15
 8001534:	401a      	ands	r2, r3
 8001536:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <HAL_RCC_ClockConfig+0x204>)
 8001538:	0092      	lsls	r2, r2, #2
 800153a:	58d3      	ldr	r3, [r2, r3]
 800153c:	221f      	movs	r2, #31
 800153e:	4013      	ands	r3, r2
 8001540:	000a      	movs	r2, r1
 8001542:	40da      	lsrs	r2, r3
 8001544:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <HAL_RCC_ClockConfig+0x208>)
 8001546:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001548:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <HAL_RCC_ClockConfig+0x20c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	0018      	movs	r0, r3
 800154e:	f7ff f811 	bl	8000574 <HAL_InitTick>
 8001552:	0003      	movs	r3, r0
}
 8001554:	0018      	movs	r0, r3
 8001556:	46bd      	mov	sp, r7
 8001558:	b004      	add	sp, #16
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40022000 	.word	0x40022000
 8001560:	00001388 	.word	0x00001388
 8001564:	40021000 	.word	0x40021000
 8001568:	fffff0ff 	.word	0xfffff0ff
 800156c:	ffff8fff 	.word	0xffff8fff
 8001570:	0800193c 	.word	0x0800193c
 8001574:	20000000 	.word	0x20000000
 8001578:	20000004 	.word	0x20000004

0800157c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001582:	4b3c      	ldr	r3, [pc, #240]	; (8001674 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	2238      	movs	r2, #56	; 0x38
 8001588:	4013      	ands	r3, r2
 800158a:	d10f      	bne.n	80015ac <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800158c:	4b39      	ldr	r3, [pc, #228]	; (8001674 <HAL_RCC_GetSysClockFreq+0xf8>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	0adb      	lsrs	r3, r3, #11
 8001592:	2207      	movs	r2, #7
 8001594:	4013      	ands	r3, r2
 8001596:	2201      	movs	r2, #1
 8001598:	409a      	lsls	r2, r3
 800159a:	0013      	movs	r3, r2
 800159c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800159e:	6839      	ldr	r1, [r7, #0]
 80015a0:	4835      	ldr	r0, [pc, #212]	; (8001678 <HAL_RCC_GetSysClockFreq+0xfc>)
 80015a2:	f7fe fdad 	bl	8000100 <__udivsi3>
 80015a6:	0003      	movs	r3, r0
 80015a8:	613b      	str	r3, [r7, #16]
 80015aa:	e05d      	b.n	8001668 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015ac:	4b31      	ldr	r3, [pc, #196]	; (8001674 <HAL_RCC_GetSysClockFreq+0xf8>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	2238      	movs	r2, #56	; 0x38
 80015b2:	4013      	ands	r3, r2
 80015b4:	2b08      	cmp	r3, #8
 80015b6:	d102      	bne.n	80015be <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80015b8:	4b30      	ldr	r3, [pc, #192]	; (800167c <HAL_RCC_GetSysClockFreq+0x100>)
 80015ba:	613b      	str	r3, [r7, #16]
 80015bc:	e054      	b.n	8001668 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015be:	4b2d      	ldr	r3, [pc, #180]	; (8001674 <HAL_RCC_GetSysClockFreq+0xf8>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	2238      	movs	r2, #56	; 0x38
 80015c4:	4013      	ands	r3, r2
 80015c6:	2b10      	cmp	r3, #16
 80015c8:	d138      	bne.n	800163c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80015ca:	4b2a      	ldr	r3, [pc, #168]	; (8001674 <HAL_RCC_GetSysClockFreq+0xf8>)
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	2203      	movs	r2, #3
 80015d0:	4013      	ands	r3, r2
 80015d2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80015d4:	4b27      	ldr	r3, [pc, #156]	; (8001674 <HAL_RCC_GetSysClockFreq+0xf8>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	091b      	lsrs	r3, r3, #4
 80015da:	2207      	movs	r2, #7
 80015dc:	4013      	ands	r3, r2
 80015de:	3301      	adds	r3, #1
 80015e0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2b03      	cmp	r3, #3
 80015e6:	d10d      	bne.n	8001604 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80015e8:	68b9      	ldr	r1, [r7, #8]
 80015ea:	4824      	ldr	r0, [pc, #144]	; (800167c <HAL_RCC_GetSysClockFreq+0x100>)
 80015ec:	f7fe fd88 	bl	8000100 <__udivsi3>
 80015f0:	0003      	movs	r3, r0
 80015f2:	0019      	movs	r1, r3
 80015f4:	4b1f      	ldr	r3, [pc, #124]	; (8001674 <HAL_RCC_GetSysClockFreq+0xf8>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	0a1b      	lsrs	r3, r3, #8
 80015fa:	227f      	movs	r2, #127	; 0x7f
 80015fc:	4013      	ands	r3, r2
 80015fe:	434b      	muls	r3, r1
 8001600:	617b      	str	r3, [r7, #20]
        break;
 8001602:	e00d      	b.n	8001620 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001604:	68b9      	ldr	r1, [r7, #8]
 8001606:	481c      	ldr	r0, [pc, #112]	; (8001678 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001608:	f7fe fd7a 	bl	8000100 <__udivsi3>
 800160c:	0003      	movs	r3, r0
 800160e:	0019      	movs	r1, r3
 8001610:	4b18      	ldr	r3, [pc, #96]	; (8001674 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	0a1b      	lsrs	r3, r3, #8
 8001616:	227f      	movs	r2, #127	; 0x7f
 8001618:	4013      	ands	r3, r2
 800161a:	434b      	muls	r3, r1
 800161c:	617b      	str	r3, [r7, #20]
        break;
 800161e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001620:	4b14      	ldr	r3, [pc, #80]	; (8001674 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	0f5b      	lsrs	r3, r3, #29
 8001626:	2207      	movs	r2, #7
 8001628:	4013      	ands	r3, r2
 800162a:	3301      	adds	r3, #1
 800162c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	6978      	ldr	r0, [r7, #20]
 8001632:	f7fe fd65 	bl	8000100 <__udivsi3>
 8001636:	0003      	movs	r3, r0
 8001638:	613b      	str	r3, [r7, #16]
 800163a:	e015      	b.n	8001668 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800163c:	4b0d      	ldr	r3, [pc, #52]	; (8001674 <HAL_RCC_GetSysClockFreq+0xf8>)
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	2238      	movs	r2, #56	; 0x38
 8001642:	4013      	ands	r3, r2
 8001644:	2b20      	cmp	r3, #32
 8001646:	d103      	bne.n	8001650 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001648:	2380      	movs	r3, #128	; 0x80
 800164a:	021b      	lsls	r3, r3, #8
 800164c:	613b      	str	r3, [r7, #16]
 800164e:	e00b      	b.n	8001668 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001650:	4b08      	ldr	r3, [pc, #32]	; (8001674 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	2238      	movs	r2, #56	; 0x38
 8001656:	4013      	ands	r3, r2
 8001658:	2b18      	cmp	r3, #24
 800165a:	d103      	bne.n	8001664 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800165c:	23fa      	movs	r3, #250	; 0xfa
 800165e:	01db      	lsls	r3, r3, #7
 8001660:	613b      	str	r3, [r7, #16]
 8001662:	e001      	b.n	8001668 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001664:	2300      	movs	r3, #0
 8001666:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001668:	693b      	ldr	r3, [r7, #16]
}
 800166a:	0018      	movs	r0, r3
 800166c:	46bd      	mov	sp, r7
 800166e:	b006      	add	sp, #24
 8001670:	bd80      	pop	{r7, pc}
 8001672:	46c0      	nop			; (mov r8, r8)
 8001674:	40021000 	.word	0x40021000
 8001678:	00f42400 	.word	0x00f42400
 800167c:	007a1200 	.word	0x007a1200

08001680 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001688:	2313      	movs	r3, #19
 800168a:	18fb      	adds	r3, r7, r3
 800168c:	2200      	movs	r2, #0
 800168e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001690:	2312      	movs	r3, #18
 8001692:	18fb      	adds	r3, r7, r3
 8001694:	2200      	movs	r2, #0
 8001696:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	2380      	movs	r3, #128	; 0x80
 800169e:	029b      	lsls	r3, r3, #10
 80016a0:	4013      	ands	r3, r2
 80016a2:	d100      	bne.n	80016a6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80016a4:	e0a3      	b.n	80017ee <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016a6:	2011      	movs	r0, #17
 80016a8:	183b      	adds	r3, r7, r0
 80016aa:	2200      	movs	r2, #0
 80016ac:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ae:	4b7f      	ldr	r3, [pc, #508]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80016b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016b2:	2380      	movs	r3, #128	; 0x80
 80016b4:	055b      	lsls	r3, r3, #21
 80016b6:	4013      	ands	r3, r2
 80016b8:	d110      	bne.n	80016dc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ba:	4b7c      	ldr	r3, [pc, #496]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80016bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016be:	4b7b      	ldr	r3, [pc, #492]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80016c0:	2180      	movs	r1, #128	; 0x80
 80016c2:	0549      	lsls	r1, r1, #21
 80016c4:	430a      	orrs	r2, r1
 80016c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80016c8:	4b78      	ldr	r3, [pc, #480]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80016ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016cc:	2380      	movs	r3, #128	; 0x80
 80016ce:	055b      	lsls	r3, r3, #21
 80016d0:	4013      	ands	r3, r2
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016d6:	183b      	adds	r3, r7, r0
 80016d8:	2201      	movs	r2, #1
 80016da:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016dc:	4b74      	ldr	r3, [pc, #464]	; (80018b0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	4b73      	ldr	r3, [pc, #460]	; (80018b0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80016e2:	2180      	movs	r1, #128	; 0x80
 80016e4:	0049      	lsls	r1, r1, #1
 80016e6:	430a      	orrs	r2, r1
 80016e8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80016ea:	f7fe ff9f 	bl	800062c <HAL_GetTick>
 80016ee:	0003      	movs	r3, r0
 80016f0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80016f2:	e00b      	b.n	800170c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016f4:	f7fe ff9a 	bl	800062c <HAL_GetTick>
 80016f8:	0002      	movs	r2, r0
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d904      	bls.n	800170c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001702:	2313      	movs	r3, #19
 8001704:	18fb      	adds	r3, r7, r3
 8001706:	2203      	movs	r2, #3
 8001708:	701a      	strb	r2, [r3, #0]
        break;
 800170a:	e005      	b.n	8001718 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800170c:	4b68      	ldr	r3, [pc, #416]	; (80018b0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	2380      	movs	r3, #128	; 0x80
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	4013      	ands	r3, r2
 8001716:	d0ed      	beq.n	80016f4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001718:	2313      	movs	r3, #19
 800171a:	18fb      	adds	r3, r7, r3
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d154      	bne.n	80017cc <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001722:	4b62      	ldr	r3, [pc, #392]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001724:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001726:	23c0      	movs	r3, #192	; 0xc0
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4013      	ands	r3, r2
 800172c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d019      	beq.n	8001768 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	695b      	ldr	r3, [r3, #20]
 8001738:	697a      	ldr	r2, [r7, #20]
 800173a:	429a      	cmp	r2, r3
 800173c:	d014      	beq.n	8001768 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800173e:	4b5b      	ldr	r3, [pc, #364]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001742:	4a5c      	ldr	r2, [pc, #368]	; (80018b4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001744:	4013      	ands	r3, r2
 8001746:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001748:	4b58      	ldr	r3, [pc, #352]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800174a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800174c:	4b57      	ldr	r3, [pc, #348]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800174e:	2180      	movs	r1, #128	; 0x80
 8001750:	0249      	lsls	r1, r1, #9
 8001752:	430a      	orrs	r2, r1
 8001754:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001756:	4b55      	ldr	r3, [pc, #340]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001758:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800175a:	4b54      	ldr	r3, [pc, #336]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800175c:	4956      	ldr	r1, [pc, #344]	; (80018b8 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 800175e:	400a      	ands	r2, r1
 8001760:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001762:	4b52      	ldr	r3, [pc, #328]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001764:	697a      	ldr	r2, [r7, #20]
 8001766:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	2201      	movs	r2, #1
 800176c:	4013      	ands	r3, r2
 800176e:	d016      	beq.n	800179e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001770:	f7fe ff5c 	bl	800062c <HAL_GetTick>
 8001774:	0003      	movs	r3, r0
 8001776:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001778:	e00c      	b.n	8001794 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800177a:	f7fe ff57 	bl	800062c <HAL_GetTick>
 800177e:	0002      	movs	r2, r0
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	4a4d      	ldr	r2, [pc, #308]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d904      	bls.n	8001794 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800178a:	2313      	movs	r3, #19
 800178c:	18fb      	adds	r3, r7, r3
 800178e:	2203      	movs	r2, #3
 8001790:	701a      	strb	r2, [r3, #0]
            break;
 8001792:	e004      	b.n	800179e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001794:	4b45      	ldr	r3, [pc, #276]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001798:	2202      	movs	r2, #2
 800179a:	4013      	ands	r3, r2
 800179c:	d0ed      	beq.n	800177a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800179e:	2313      	movs	r3, #19
 80017a0:	18fb      	adds	r3, r7, r3
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d10a      	bne.n	80017be <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80017a8:	4b40      	ldr	r3, [pc, #256]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80017aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ac:	4a41      	ldr	r2, [pc, #260]	; (80018b4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80017ae:	4013      	ands	r3, r2
 80017b0:	0019      	movs	r1, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	695a      	ldr	r2, [r3, #20]
 80017b6:	4b3d      	ldr	r3, [pc, #244]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80017b8:	430a      	orrs	r2, r1
 80017ba:	65da      	str	r2, [r3, #92]	; 0x5c
 80017bc:	e00c      	b.n	80017d8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80017be:	2312      	movs	r3, #18
 80017c0:	18fb      	adds	r3, r7, r3
 80017c2:	2213      	movs	r2, #19
 80017c4:	18ba      	adds	r2, r7, r2
 80017c6:	7812      	ldrb	r2, [r2, #0]
 80017c8:	701a      	strb	r2, [r3, #0]
 80017ca:	e005      	b.n	80017d8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80017cc:	2312      	movs	r3, #18
 80017ce:	18fb      	adds	r3, r7, r3
 80017d0:	2213      	movs	r2, #19
 80017d2:	18ba      	adds	r2, r7, r2
 80017d4:	7812      	ldrb	r2, [r2, #0]
 80017d6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017d8:	2311      	movs	r3, #17
 80017da:	18fb      	adds	r3, r7, r3
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d105      	bne.n	80017ee <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017e2:	4b32      	ldr	r3, [pc, #200]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80017e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017e6:	4b31      	ldr	r3, [pc, #196]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80017e8:	4935      	ldr	r1, [pc, #212]	; (80018c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80017ea:	400a      	ands	r2, r1
 80017ec:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2201      	movs	r2, #1
 80017f4:	4013      	ands	r3, r2
 80017f6:	d009      	beq.n	800180c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80017f8:	4b2c      	ldr	r3, [pc, #176]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80017fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017fc:	2203      	movs	r2, #3
 80017fe:	4393      	bics	r3, r2
 8001800:	0019      	movs	r1, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685a      	ldr	r2, [r3, #4]
 8001806:	4b29      	ldr	r3, [pc, #164]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001808:	430a      	orrs	r2, r1
 800180a:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2220      	movs	r2, #32
 8001812:	4013      	ands	r3, r2
 8001814:	d009      	beq.n	800182a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001816:	4b25      	ldr	r3, [pc, #148]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800181a:	4a2a      	ldr	r2, [pc, #168]	; (80018c4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800181c:	4013      	ands	r3, r2
 800181e:	0019      	movs	r1, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689a      	ldr	r2, [r3, #8]
 8001824:	4b21      	ldr	r3, [pc, #132]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001826:	430a      	orrs	r2, r1
 8001828:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	2380      	movs	r3, #128	; 0x80
 8001830:	01db      	lsls	r3, r3, #7
 8001832:	4013      	ands	r3, r2
 8001834:	d015      	beq.n	8001862 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001836:	4b1d      	ldr	r3, [pc, #116]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	0899      	lsrs	r1, r3, #2
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	691a      	ldr	r2, [r3, #16]
 8001842:	4b1a      	ldr	r3, [pc, #104]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001844:	430a      	orrs	r2, r1
 8001846:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	691a      	ldr	r2, [r3, #16]
 800184c:	2380      	movs	r3, #128	; 0x80
 800184e:	05db      	lsls	r3, r3, #23
 8001850:	429a      	cmp	r2, r3
 8001852:	d106      	bne.n	8001862 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001854:	4b15      	ldr	r3, [pc, #84]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001856:	68da      	ldr	r2, [r3, #12]
 8001858:	4b14      	ldr	r3, [pc, #80]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800185a:	2180      	movs	r1, #128	; 0x80
 800185c:	0249      	lsls	r1, r1, #9
 800185e:	430a      	orrs	r2, r1
 8001860:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	011b      	lsls	r3, r3, #4
 800186a:	4013      	ands	r3, r2
 800186c:	d016      	beq.n	800189c <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800186e:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001872:	4a15      	ldr	r2, [pc, #84]	; (80018c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001874:	4013      	ands	r3, r2
 8001876:	0019      	movs	r1, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	68da      	ldr	r2, [r3, #12]
 800187c:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800187e:	430a      	orrs	r2, r1
 8001880:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	68da      	ldr	r2, [r3, #12]
 8001886:	2380      	movs	r3, #128	; 0x80
 8001888:	01db      	lsls	r3, r3, #7
 800188a:	429a      	cmp	r2, r3
 800188c:	d106      	bne.n	800189c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800188e:	4b07      	ldr	r3, [pc, #28]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001890:	68da      	ldr	r2, [r3, #12]
 8001892:	4b06      	ldr	r3, [pc, #24]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001894:	2180      	movs	r1, #128	; 0x80
 8001896:	0249      	lsls	r1, r1, #9
 8001898:	430a      	orrs	r2, r1
 800189a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800189c:	2312      	movs	r3, #18
 800189e:	18fb      	adds	r3, r7, r3
 80018a0:	781b      	ldrb	r3, [r3, #0]
}
 80018a2:	0018      	movs	r0, r3
 80018a4:	46bd      	mov	sp, r7
 80018a6:	b006      	add	sp, #24
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	46c0      	nop			; (mov r8, r8)
 80018ac:	40021000 	.word	0x40021000
 80018b0:	40007000 	.word	0x40007000
 80018b4:	fffffcff 	.word	0xfffffcff
 80018b8:	fffeffff 	.word	0xfffeffff
 80018bc:	00001388 	.word	0x00001388
 80018c0:	efffffff 	.word	0xefffffff
 80018c4:	ffffcfff 	.word	0xffffcfff
 80018c8:	ffff3fff 	.word	0xffff3fff

080018cc <__libc_init_array>:
 80018cc:	b570      	push	{r4, r5, r6, lr}
 80018ce:	2600      	movs	r6, #0
 80018d0:	4d0c      	ldr	r5, [pc, #48]	; (8001904 <__libc_init_array+0x38>)
 80018d2:	4c0d      	ldr	r4, [pc, #52]	; (8001908 <__libc_init_array+0x3c>)
 80018d4:	1b64      	subs	r4, r4, r5
 80018d6:	10a4      	asrs	r4, r4, #2
 80018d8:	42a6      	cmp	r6, r4
 80018da:	d109      	bne.n	80018f0 <__libc_init_array+0x24>
 80018dc:	2600      	movs	r6, #0
 80018de:	f000 f821 	bl	8001924 <_init>
 80018e2:	4d0a      	ldr	r5, [pc, #40]	; (800190c <__libc_init_array+0x40>)
 80018e4:	4c0a      	ldr	r4, [pc, #40]	; (8001910 <__libc_init_array+0x44>)
 80018e6:	1b64      	subs	r4, r4, r5
 80018e8:	10a4      	asrs	r4, r4, #2
 80018ea:	42a6      	cmp	r6, r4
 80018ec:	d105      	bne.n	80018fa <__libc_init_array+0x2e>
 80018ee:	bd70      	pop	{r4, r5, r6, pc}
 80018f0:	00b3      	lsls	r3, r6, #2
 80018f2:	58eb      	ldr	r3, [r5, r3]
 80018f4:	4798      	blx	r3
 80018f6:	3601      	adds	r6, #1
 80018f8:	e7ee      	b.n	80018d8 <__libc_init_array+0xc>
 80018fa:	00b3      	lsls	r3, r6, #2
 80018fc:	58eb      	ldr	r3, [r5, r3]
 80018fe:	4798      	blx	r3
 8001900:	3601      	adds	r6, #1
 8001902:	e7f2      	b.n	80018ea <__libc_init_array+0x1e>
 8001904:	0800197c 	.word	0x0800197c
 8001908:	0800197c 	.word	0x0800197c
 800190c:	0800197c 	.word	0x0800197c
 8001910:	08001980 	.word	0x08001980

08001914 <memset>:
 8001914:	0003      	movs	r3, r0
 8001916:	1882      	adds	r2, r0, r2
 8001918:	4293      	cmp	r3, r2
 800191a:	d100      	bne.n	800191e <memset+0xa>
 800191c:	4770      	bx	lr
 800191e:	7019      	strb	r1, [r3, #0]
 8001920:	3301      	adds	r3, #1
 8001922:	e7f9      	b.n	8001918 <memset+0x4>

08001924 <_init>:
 8001924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001926:	46c0      	nop			; (mov r8, r8)
 8001928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800192a:	bc08      	pop	{r3}
 800192c:	469e      	mov	lr, r3
 800192e:	4770      	bx	lr

08001930 <_fini>:
 8001930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001932:	46c0      	nop			; (mov r8, r8)
 8001934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001936:	bc08      	pop	{r3}
 8001938:	469e      	mov	lr, r3
 800193a:	4770      	bx	lr
